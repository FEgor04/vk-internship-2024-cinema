/**
 * Generated by orval v6.30.2 üç∫
 * Do not edit manually.
 * –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è –Ω–µ–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ API –∫–∏–Ω–æ–ø–æ–∏—Å–∫–∞ (kinopoisk.dev).
 * 
<!-- Yandex.Metrika counter -->
<div><img src="https://mc.yandex.ru/watch/62307766" style="position:absolute; left:-9999px;" alt="" /></div>
<!-- /Yandex.Metrika counter -->
<p>–ß–µ—Ä–µ–∑ —ç—Ç–æ—Ç API –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∏–Ω–æ–ø–æ–∏—Å–∫–∞. –ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–∑—É—á–∏–≤ —ç—Ç—É –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é.</p>
<h2>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π?</h2>
<p>
–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å API –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –≤ –±–æ—Ç–µ <a href="https://t.me/kinopoiskdev_bot">@kinopoiskdev_bot</a>. <br />
–ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <strong>Authorize</strong> –∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ –ø–æ–ª–µ <strong>Value</strong>.<br />
–ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã –∫ API, –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <strong>Try it out</strong> –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –Ω—É–∂–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞.<br />
–ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <strong>Execute</strong> –∏ –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç –æ—Ç API –∏ –ø—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞.
</p>
<h3>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å API?</h3>
<p>
API —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É REST, –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –Ω–∞ –∞–¥—Ä–µ—Å <code>https://api.kinopoisk.dev/</code> —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤–µ—Ä—Å–∏–∏ API –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞.<br />
–í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∫ API –∫–∏–Ω–æ–ø–æ–∏—Å–∫–∞ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ <code>X-API-KEY</code> —Å –≤–∞—à–∏–º —Ç–æ–∫–µ–Ω–æ–º. –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—à–∏–±–∫—É <code>401</code>.<br />
–ü—Ä–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ —É—á–∏—Ç—ã–≤–∞–π—Ç–µ, —á—Ç–æ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ <code>query</code> –∏ <code>path</code>. –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–µ—Ç–æ–¥–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ.
–ù–∞–ø—Ä–∏–º–µ—Ä, –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –∑–∞ 2023 –≥–æ–¥ –≤ –∂–∞–Ω—Ä–µ <code>–∫—Ä–∏–º–∏–Ω–∞–ª</code>, —Ç–æ–≥–¥–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫: <code>https://api.kinopoisk.dev/v1.4/movie?year=2023&genres.name=–∫—Ä–∏–º–∏–Ω–∞–ª</code>.
–ò–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –≤—ã—à–µ 8, —Ç–æ–≥–¥–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫: <code>https://api.kinopoisk.dev/v1.4/movie?rating.imdb=8-10</code>.
–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è kinopoisk api –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –≤–∞–º —Å–æ—Å—Ç–∞–≤–∏—Ç—å –Ω—É–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –µ–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–º.
</p>
<h3>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Å–∏–Ω—Ç–µ–∫—Å–∞ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</h3>
<p>
–ö–ª—é—á–∏ –≤ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –∏–º–µ—é—Ç —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∑–Ω–∞—á–µ–Ω–∏–π. –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–Ω–∞—á–µ–Ω–∏—è, –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞, —Å–µ—Ä–∏–∞–ª–∞ –∏ —Ç.–¥. –≤ –±–∞–∑–µ. <br />
–ü–æ–ª—è —Å —Ç–∏–ø–æ–º <code>Number</code> –º–æ–≥—É—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–∞—Ö: <code>rating.kp=1-10</code>, <code>rating.kp=1</code>, <code>year=2022&year=2023</code>. <br />
–ü–æ–ª—è —Å —Ç–∏–ø–æ–º <code>Date</code> –º–æ–≥—É—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–∞—Ö: <code>premiere.russia=dd.mm.yyyy-dd.mm.yyyy</code>, <code>premiere.russia=dd.mm.yyyy</code>. <br />
–ü–æ–ª—è —Å —Ç–∏–ø–æ–º <code>String</code> –º–æ–≥—É—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–∞—Ö: <code>genres.name=–¥—Ä–∞–º–∞</code>, <code>genres.name=–∫—Ä–∏–º–∏–Ω–∞–ª</code>, <code>genres.name=–∫—Ä–∏–º–∏–Ω–∞–ª&genres.name=–¥—Ä–∞–º–∞</code> <br/>
–ü–æ–ª—è —Å —Ç–∏–ø–æ–º <code>Boolean</code> –º–æ–≥—É—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–∞—Ö: <code>isSeries=true</code>, <code>isSeries=false</code>. <br />
–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∂–∞–Ω—Ä–æ–≤ –∏ —Å—Ç—Ä–∞–Ω –º–æ–≥—É—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã <code>+</code> –∏ <code>!</code>, –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –≤–∫–ª—é—á–∞–µ–º—ã—Ö –∏ –∏—Å–∫–ª—é—á–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π. –ù–∞–ø—Ä–∏–º–µ—Ä, –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –≤ –∂–∞–Ω—Ä–∞—Ö <code>–¥—Ä–∞–º–∞</code> –∏ <code>–∫—Ä–∏–º–∏–Ω–∞–ª</code>, —Ç–æ–≥–¥–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫: <code>genres.name=+–¥—Ä–∞–º–∞&genres.name=+–∫—Ä–∏–º–∏–Ω–∞–ª</code>. –ò–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ —Å –∂–∞–Ω—Ä–æ–º <code>–¥—Ä–∞–º–∞</code> –∏ –±–µ–∑ –∂–∞–Ω—Ä–∞ <code>–∫—Ä–∏–º–∏–Ω–∞–ª</code>, —Ç–æ–≥–¥–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫: <code>genres.name=+–¥—Ä–∞–º–∞&genres.name=!–∫—Ä–∏–º–∏–Ω–∞–ª</code>. <br />
</p>
<p>
–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤:
<ul>
  <li><code>!</code> - –∏—Å–∫–ª—é—á–∏—Ç—å. –≠—Ç–æ—Ç —Å–∏–º–≤–æ–ª –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º–µ <code>%21</code></li>
  <li><code>+</code> - –≤–∫–ª—é—á–∏—Ç—å. –≠—Ç–æ—Ç —Å–∏–º–≤–æ–ª –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º–µ <code>%2B</code></li>
  <li><code>-</code> - –¥–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è.</li>
</ul>
</p>

<p>–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ä–∞–±–æ—Ç—ã —Å API –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ —á–∞—Ç <a href="https://t.me/+jeHPZVXiLPFhODJi">Developer Community KinopoiskDev</a>.</p>

<p>–ï—Å–ª–∏ –≤—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –æ—à–∏–±–∫—É –∏–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é, —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ issue –Ω–∞ <a href="https://github.com/mdwitr0/kinopoiskdev">GitHub</a>.</p>

<h3>–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:</h3>
<ul>
  <li><a href="https://kinopoiskdev.readme.io">–ë–æ–ª–µ–µ —É–¥–æ–±–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è</a></li>
  <li><a href="https://github.com/OpenMovieDB/kinopoiskdev_client">JavaScript –∏ TypeScript –∫–ª–∏–µ–Ω—Ç (–£—Å—Ç–∞—Ä–µ–ª, –∂–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)</a></li>
  <li><a href="https://github.com/odi1n/kinopoisk_dev">Python –∫–ª–∏–µ–Ω—Ç (–£—Å—Ç–∞—Ä–µ–ª, –∂–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)</a></li>
  <li><a href="/documentation-json">OpenAPI Specification (JSON)</a></li>
  <li><a href="/documentation-yaml">OpenAPI Specification (YAML)</a></li>
</ul>

 * OpenAPI spec version: 1.4
 */
import { faker } from "@faker-js/faker/locale/ru";
import { HttpResponse, delay, http } from "msw";
import type {
  ImageDocsResponseDtoV14,
  KeywordDocsResponseDtoV14,
  List,
  ListDocsResponseDtoV14,
  MovieAwardDocsResponseDto,
  MovieDocsResponseDtoV14,
  MovieDtoV14,
  Person,
  PersonAwardDocsResponseDto,
  PersonDocsResponseDtoV14,
  PossibleValueDto,
  ReviewDocsResponseDtoV14,
  SearchMovieResponseDtoV14,
  SearchPersonResponseDtoV14,
  SeasonDocsResponseDtoV14,
  StudioDocsResponseDtoV14,
} from "./index.schemas";

export const getMovieControllerFindOneV14ResponseMock = (
  overrideResponse: Partial<MovieDtoV14> = {},
): MovieDtoV14 => ({
  ageRating: "16",
  alternativeName: "Spider man",
  audience: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({ count: 1000, country: "–†–æ—Å—Å–∏—è" })),
  backdrop: {
    previewUrl: faker.helpers.arrayElement([faker.word.sample(), null]),
    url: faker.helpers.arrayElement([faker.word.sample(), null]),
  },
  budget: { currency: "‚Ç¨", value: 207283 },
  countries: (() =>
    new Array(3).fill(0).map(() => ({ name: faker.location.country() })))(),
  createdAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    null,
  ]),
  description: faker.helpers.arrayElement([
    "1987 –≥–æ–¥. –î–∂–æ—Ä–¥–∞–Ω –ë–µ–ª—Ñ–æ—Ä—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –±—Ä–æ–∫–µ—Ä–æ–º –≤ —É—Å–ø–µ—à–Ω–æ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–º –±–∞–Ω–∫–µ. –í—Å–∫–æ—Ä–µ –±–∞–Ω–∫ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤–Ω–µ–∑–∞–ø–Ω–æ–≥–æ –æ–±–≤–∞–ª–∞ –∏–Ω–¥–µ–∫—Å–∞ –î–æ—É-–î–∂–æ–Ω—Å–∞. –ü–æ —Å–æ–≤–µ—Ç—É –∂–µ–Ω—ã –¢–µ—Ä–µ–∑—ã –î–∂–æ—Ä–¥–∞–Ω —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤ –Ω–µ–±–æ–ª—å—à–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ, –∑–∞–Ω–∏–º–∞—é—â–µ–µ—Å—è –º–µ–ª–∫–∏–º–∏ –∞–∫—Ü–∏—è–º–∏. –ï–≥–æ –Ω–∞—Å—Ç–æ–π—á–∏–≤—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ –≤—Ä–æ–∂–¥—ë–Ω–Ω–∞—è —Ö–∞—Ä–∏–∑–º–∞ –±—ã—Å—Ç—Ä–æ –¥–∞—ë—Ç —Å–≤–æ–∏ –ø–ª–æ–¥—ã. –û–Ω –∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å —Å–æ—Å–µ–¥–æ–º –ø–æ –¥–æ–º—É –î–æ–Ω–Ω–∏, —Ç–æ—Ä–≥–æ–≤—Ü–µ–º, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–∑—É –Ω–∞—Ö–æ–¥–∏—Ç –æ–±—â–∏–π —è–∑—ã–∫ —Å –î–∂–æ—Ä–¥–∞–Ω–æ–º –∏ —Ä–µ—à–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç—å —Å –Ω–∏–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Ñ–∏—Ä–º—É. –í –∫–∞—á–µ—Å—Ç–≤–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –æ–Ω–∏ –Ω–∞–Ω–∏–º–∞—é—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥—Ä—É–∑–µ–π –ë–µ–ª—Ñ–æ—Ä—Ç–∞, –µ–≥–æ –æ—Ç—Ü–∞ –ú–∞–∫—Å–∞ –∏ –Ω–∞–∑—ã–≤–∞—é—Ç –∫–æ–º–ø–∞–Ω–∏—é ¬´–°—Ç—Ä—ç—Ç—Ç–æ–Ω –û—É–∫–º–æ–Ω—Ç¬ª. –í —Å–≤–æ–±–æ–¥–Ω–æ–µ –æ—Ç —Ä–∞–±–æ—Ç—ã –≤—Ä–µ–º—è –î–∂–æ—Ä–¥–∞–Ω –ø—Ä–æ–∂–∏–≥–∞–µ—Ç –∂–∏–∑–Ω—å: –ª–∞–≤–∏—Ä—É–µ—Ç –æ—Ç –æ–¥–Ω–æ–π –≤–µ—á–µ—Ä–∏–Ω–∫–∏ –∫ –¥—Ä—É–≥–æ–π, –≤—Å—Ç—É–ø–∞–µ—Ç –≤ —Å–µ–∫—Å—É–∞–ª—å–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ø—Ä–æ—Å—Ç–∏—Ç—É—Ç–∫–∞–º–∏, —É–ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –Ω–∞—Ä–∫–æ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤, –≤ —Ç–æ–º —á–∏—Å–ª–µ –∫–æ–∫–∞–∏–Ω –∏ –∫–≤–∞–∞–ª—é–¥. –û–¥–Ω–∞–∂–¥—ã –Ω–∞—Å—Ç—É–ø–∞–µ—Ç –º–æ–º–µ–Ω—Ç, –∫–æ–≥–¥–∞ –±—ã—Å—Ç—Ä—ã–º –æ–±–æ–≥–∞—â–µ–Ω–∏–µ–º –ë–µ–ª—Ñ–æ—Ä—Ç–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å—Å—è –∞–≥–µ–Ω—Ç –§–ë–†...",
    null,
  ]),
  enName: "Spider man",
  externalId: {
    imdb: "tt0232500",
    kpHD: "48e8d0acb0f62d8585101798eaeceec5",
    tmdb: 9799,
  },
  facts: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    spoiler: faker.datatype.boolean(),
    type: faker.helpers.arrayElement([faker.word.sample(), null]),
    value: faker.word.sample(),
  })),
  fees: {
    russia: { currency: "‚Ç¨", value: 207283 },
    usa: { currency: "‚Ç¨", value: 207283 },
    world: { currency: "‚Ç¨", value: 207283 },
  },
  genres: (() =>
    new Array(3).fill(0).map(() => ({ name: faker.music.genre() })))(),
  id: 666,
  isSeries: true,
  lists: ["250 –ª—É—á—à–∏—Ö —Å–µ—Ä–∏–∞–ª–æ–≤"],
  logo: { url: faker.helpers.arrayElement([faker.word.sample(), null]) },
  movieLength: 120,
  name: "–ß–µ–ª–æ–≤–µ–∫ –ø–∞—É–∫",
  names: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    language: faker.helpers.arrayElement([faker.word.sample(), null]),
    name: faker.word.sample(),
    type: faker.helpers.arrayElement([faker.word.sample(), null]),
  })),
  networks: {
    items: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      logo: { url: faker.helpers.arrayElement([faker.word.sample(), null]) },
      name: "Netflix",
    })),
  },
  persons: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    description: faker.helpers.arrayElement([
      "1987 –≥–æ–¥. –î–∂–æ—Ä–¥–∞–Ω –ë–µ–ª—Ñ–æ—Ä—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –±—Ä–æ–∫–µ—Ä–æ–º –≤ —É—Å–ø–µ—à–Ω–æ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–º –±–∞–Ω–∫–µ. –í—Å–∫–æ—Ä–µ –±–∞–Ω–∫ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤–Ω–µ–∑–∞–ø–Ω–æ–≥–æ –æ–±–≤–∞–ª–∞ –∏–Ω–¥–µ–∫—Å–∞ –î–æ—É-–î–∂–æ–Ω—Å–∞. –ü–æ —Å–æ–≤–µ—Ç—É –∂–µ–Ω—ã –¢–µ—Ä–µ–∑—ã –î–∂–æ—Ä–¥–∞–Ω —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤ –Ω–µ–±–æ–ª—å—à–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ, –∑–∞–Ω–∏–º–∞—é—â–µ–µ—Å—è –º–µ–ª–∫–∏–º–∏ –∞–∫—Ü–∏—è–º–∏. –ï–≥–æ –Ω–∞—Å—Ç–æ–π—á–∏–≤—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ –≤—Ä–æ–∂–¥—ë–Ω–Ω–∞—è —Ö–∞—Ä–∏–∑–º–∞ –±—ã—Å—Ç—Ä–æ –¥–∞—ë—Ç —Å–≤–æ–∏ –ø–ª–æ–¥—ã. –û–Ω –∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å —Å–æ—Å–µ–¥–æ–º –ø–æ –¥–æ–º—É –î–æ–Ω–Ω–∏, —Ç–æ—Ä–≥–æ–≤—Ü–µ–º, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–∑—É –Ω–∞—Ö–æ–¥–∏—Ç –æ–±—â–∏–π —è–∑—ã–∫ —Å –î–∂–æ—Ä–¥–∞–Ω–æ–º –∏ —Ä–µ—à–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç—å —Å –Ω–∏–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Ñ–∏—Ä–º—É. –í –∫–∞—á–µ—Å—Ç–≤–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –æ–Ω–∏ –Ω–∞–Ω–∏–º–∞—é—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥—Ä—É–∑–µ–π –ë–µ–ª—Ñ–æ—Ä—Ç–∞, –µ–≥–æ –æ—Ç—Ü–∞ –ú–∞–∫—Å–∞ –∏ –Ω–∞–∑—ã–≤–∞—é—Ç –∫–æ–º–ø–∞–Ω–∏—é ¬´–°—Ç—Ä—ç—Ç—Ç–æ–Ω –û—É–∫–º–æ–Ω—Ç¬ª. –í —Å–≤–æ–±–æ–¥–Ω–æ–µ –æ—Ç —Ä–∞–±–æ—Ç—ã –≤—Ä–µ–º—è –î–∂–æ—Ä–¥–∞–Ω –ø—Ä–æ–∂–∏–≥–∞–µ—Ç –∂–∏–∑–Ω—å: –ª–∞–≤–∏—Ä—É–µ—Ç –æ—Ç –æ–¥–Ω–æ–π –≤–µ—á–µ—Ä–∏–Ω–∫–∏ –∫ –¥—Ä—É–≥–æ–π, –≤—Å—Ç—É–ø–∞–µ—Ç –≤ —Å–µ–∫—Å—É–∞–ª—å–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ø—Ä–æ—Å—Ç–∏—Ç—É—Ç–∫–∞–º–∏, —É–ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –Ω–∞—Ä–∫–æ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤, –≤ —Ç–æ–º —á–∏—Å–ª–µ –∫–æ–∫–∞–∏–Ω –∏ –∫–≤–∞–∞–ª—é–¥. –û–¥–Ω–∞–∂–¥—ã –Ω–∞—Å—Ç—É–ø–∞–µ—Ç –º–æ–º–µ–Ω—Ç, –∫–æ–≥–¥–∞ –±—ã—Å—Ç—Ä—ã–º –æ–±–æ–≥–∞—â–µ–Ω–∏–µ–º –ë–µ–ª—Ñ–æ—Ä—Ç–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å—Å—è –∞–≥–µ–Ω—Ç –§–ë–†...",
      null,
    ]),
    enName: "Paul Walker",
    enProfession: faker.helpers.arrayElement([faker.word.sample(), null]),
    id: 6317,
    name: "–ü–æ–ª –£–æ–∫–µ—Ä",
    photo: "https://st.kp.yandex.net/images/actor_iphone/iphone360_6317.jpg",
    profession: faker.helpers.arrayElement([faker.word.sample(), null]),
  })),
  poster: {
    url: "https://image.openmoviedb.com/kinopoisk-images/1946459/5c758ac0-7a5c-4f00-a94f-1be680a312fb/orig",
    previewUrl:
      "https://image.openmoviedb.com/kinopoisk-images/1946459/5c758ac0-7a5c-4f00-a94f-1be680a312fb/x1000",
  },
  premiere: {
    bluray: faker.helpers.arrayElement([faker.word.sample(), null]),
    cinema: "2023-02-25T02:44:39.359Z",
    country: "–°–®–ê",
    digital: faker.helpers.arrayElement([faker.word.sample(), null]),
    dvd: faker.helpers.arrayElement([faker.word.sample(), null]),
    russia: "2023-02-25T02:44:39.359Z",
    world: "2023-02-25T02:44:39.359Z",
  },
  rating: {
    await: 6.1,
    filmCritics: 10,
    imdb: 8.4,
    kp: 6.2,
    russianFilmCritics: 5.1,
    tmdb: 3.2,
  },
  ratingMpaa: "pg13",
  releaseYears: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({ end: 2023, start: 2022 })),
  reviewInfo: {
    count: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      null,
    ]),
    percentage: faker.helpers.arrayElement([faker.word.sample(), null]),
    positiveCount: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      null,
    ]),
  },
  seasonsInfo: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    episodesCount: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      null,
    ]),
    number: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      null,
    ]),
  })),
  sequelsAndPrequels: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    alternativeName: faker.helpers.arrayElement([faker.word.sample(), null]),
    enName: faker.helpers.arrayElement([faker.word.sample(), null]),
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.helpers.arrayElement([faker.word.sample(), null]),
    poster: faker.helpers.arrayElement([
      {
        url: "https://image.openmoviedb.com/kinopoisk-images/1946459/5c758ac0-7a5c-4f00-a94f-1be680a312fb/orig",
        previewUrl:
          "https://image.openmoviedb.com/kinopoisk-images/1946459/5c758ac0-7a5c-4f00-a94f-1be680a312fb/x1000",
      },
      null,
    ]),
    rating: {
      await: 6.1,
      filmCritics: 10,
      imdb: 8.4,
      kp: 6.2,
      russianFilmCritics: 5.1,
      tmdb: 3.2,
    },
    type: faker.helpers.arrayElement([faker.word.sample(), null]),
    year: 2021,
  })),
  seriesLength: 20,
  shortDescription: faker.helpers.arrayElement([
    "–í–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ —Ü–∏–Ω–∏–∫–∞-–≥–µ–¥–æ–Ω–∏—Å—Ç–∞ –Ω–∞ –±–∏–∑–Ω–µ—Å-–æ–ª–∏–º–ø 1980-—Ö. –ë–ª–∏—Å—Ç–∞—Ç–µ–ª—å–Ω—ã–π —Ç–∞–Ω–¥–µ–º –õ–µ–æ–Ω–∞—Ä–¥–æ –î–∏–ö–∞–ø—Ä–∏–æ –∏ –ú–∞—Ä—Ç–∏–Ω–∞ –°–∫–æ—Ä—Å–µ–∑–µ",
    null,
  ]),
  similarMovies: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    alternativeName: faker.helpers.arrayElement([faker.word.sample(), null]),
    enName: faker.helpers.arrayElement([faker.word.sample(), null]),
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.helpers.arrayElement([faker.word.sample(), null]),
    poster: faker.helpers.arrayElement([
      {
        url: "https://image.openmoviedb.com/kinopoisk-images/1946459/5c758ac0-7a5c-4f00-a94f-1be680a312fb/orig",
        previewUrl:
          "https://image.openmoviedb.com/kinopoisk-images/1946459/5c758ac0-7a5c-4f00-a94f-1be680a312fb/x1000",
      },
      null,
    ]),
    rating: {
      await: 6.1,
      filmCritics: 10,
      imdb: 8.4,
      kp: 6.2,
      russianFilmCritics: 5.1,
      tmdb: 3.2,
    },
    type: faker.helpers.arrayElement([faker.word.sample(), null]),
    year: 2021,
  })),
  slogan: faker.helpers.arrayElement([faker.word.sample(), null]),
  status: "completed",
  ticketsOnSale: true,
  top10: 1,
  top250: 200,
  totalSeriesLength: 155,
  type: "movie",
  typeNumber: 1,
  updatedAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    null,
  ]),
  videos: {
    trailers: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      name: "Official Trailer",
      site: "youtube",
      size: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        null,
      ]),
      type: "TRAILER",
      url: "https://www.youtube.com/embed/ZsJz2TJAPjw",
    })),
  },
  votes: {
    await: 34000,
    filmCritics: 10000,
    imdb: 50000,
    kp: 60000,
    russianFilmCritics: 4000,
    tmdb: 10000,
  },
  watchability: {
    items: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      logo: { url: faker.helpers.arrayElement([faker.word.sample(), null]) },
      name: faker.helpers.arrayElement([faker.word.sample(), null]),
      url: faker.word.sample(),
    })),
  },
  year: 2023,
  ...overrideResponse,
});

export const getMovieControllerFindManyByQueryV14ResponseMock = (
  overrideResponse: Partial<MovieDocsResponseDtoV14> = {},
): MovieDocsResponseDtoV14 => ({
  docs: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    ageRating: "16",
    alternativeName: "Spider man",
    audience: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({ count: 1000, country: "–†–æ—Å—Å–∏—è" })),
    backdrop: {
      previewUrl: faker.helpers.arrayElement([faker.word.sample(), null]),
      url: faker.helpers.arrayElement([faker.word.sample(), null]),
    },
    budget: { currency: "‚Ç¨", value: 207283 },
    countries: (() =>
      new Array(3).fill(0).map(() => ({ name: faker.location.country() })))(),
    createdAt: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      null,
    ]),
    description: faker.helpers.arrayElement([
      "1987 –≥–æ–¥. –î–∂–æ—Ä–¥–∞–Ω –ë–µ–ª—Ñ–æ—Ä—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –±—Ä–æ–∫–µ—Ä–æ–º –≤ —É—Å–ø–µ—à–Ω–æ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–º –±–∞–Ω–∫–µ. –í—Å–∫–æ—Ä–µ –±–∞–Ω–∫ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤–Ω–µ–∑–∞–ø–Ω–æ–≥–æ –æ–±–≤–∞–ª–∞ –∏–Ω–¥–µ–∫—Å–∞ –î–æ—É-–î–∂–æ–Ω—Å–∞. –ü–æ —Å–æ–≤–µ—Ç—É –∂–µ–Ω—ã –¢–µ—Ä–µ–∑—ã –î–∂–æ—Ä–¥–∞–Ω —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤ –Ω–µ–±–æ–ª—å—à–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ, –∑–∞–Ω–∏–º–∞—é—â–µ–µ—Å—è –º–µ–ª–∫–∏–º–∏ –∞–∫—Ü–∏—è–º–∏. –ï–≥–æ –Ω–∞—Å—Ç–æ–π—á–∏–≤—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ –≤—Ä–æ–∂–¥—ë–Ω–Ω–∞—è —Ö–∞—Ä–∏–∑–º–∞ –±—ã—Å—Ç—Ä–æ –¥–∞—ë—Ç —Å–≤–æ–∏ –ø–ª–æ–¥—ã. –û–Ω –∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å —Å–æ—Å–µ–¥–æ–º –ø–æ –¥–æ–º—É –î–æ–Ω–Ω–∏, —Ç–æ—Ä–≥–æ–≤—Ü–µ–º, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–∑—É –Ω–∞—Ö–æ–¥–∏—Ç –æ–±—â–∏–π —è–∑—ã–∫ —Å –î–∂–æ—Ä–¥–∞–Ω–æ–º –∏ —Ä–µ—à–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç—å —Å –Ω–∏–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Ñ–∏—Ä–º—É. –í –∫–∞—á–µ—Å—Ç–≤–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –æ–Ω–∏ –Ω–∞–Ω–∏–º–∞—é—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥—Ä—É–∑–µ–π –ë–µ–ª—Ñ–æ—Ä—Ç–∞, –µ–≥–æ –æ—Ç—Ü–∞ –ú–∞–∫—Å–∞ –∏ –Ω–∞–∑—ã–≤–∞—é—Ç –∫–æ–º–ø–∞–Ω–∏—é ¬´–°—Ç—Ä—ç—Ç—Ç–æ–Ω –û—É–∫–º–æ–Ω—Ç¬ª. –í —Å–≤–æ–±–æ–¥–Ω–æ–µ –æ—Ç —Ä–∞–±–æ—Ç—ã –≤—Ä–µ–º—è –î–∂–æ—Ä–¥–∞–Ω –ø—Ä–æ–∂–∏–≥–∞–µ—Ç –∂–∏–∑–Ω—å: –ª–∞–≤–∏—Ä—É–µ—Ç –æ—Ç –æ–¥–Ω–æ–π –≤–µ—á–µ—Ä–∏–Ω–∫–∏ –∫ –¥—Ä—É–≥–æ–π, –≤—Å—Ç—É–ø–∞–µ—Ç –≤ —Å–µ–∫—Å—É–∞–ª—å–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ø—Ä–æ—Å—Ç–∏—Ç—É—Ç–∫–∞–º–∏, —É–ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –Ω–∞—Ä–∫–æ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤, –≤ —Ç–æ–º —á–∏—Å–ª–µ –∫–æ–∫–∞–∏–Ω –∏ –∫–≤–∞–∞–ª—é–¥. –û–¥–Ω–∞–∂–¥—ã –Ω–∞—Å—Ç—É–ø–∞–µ—Ç –º–æ–º–µ–Ω—Ç, –∫–æ–≥–¥–∞ –±—ã—Å—Ç—Ä—ã–º –æ–±–æ–≥–∞—â–µ–Ω–∏–µ–º –ë–µ–ª—Ñ–æ—Ä—Ç–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å—Å—è –∞–≥–µ–Ω—Ç –§–ë–†...",
      null,
    ]),
    enName: "Spider man",
    externalId: {
      imdb: "tt0232500",
      kpHD: "48e8d0acb0f62d8585101798eaeceec5",
      tmdb: 9799,
    },
    facts: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      spoiler: faker.datatype.boolean(),
      type: faker.helpers.arrayElement([faker.word.sample(), null]),
      value: faker.word.sample(),
    })),
    fees: {
      russia: { currency: "‚Ç¨", value: 207283 },
      usa: { currency: "‚Ç¨", value: 207283 },
      world: { currency: "‚Ç¨", value: 207283 },
    },
    genres: (() =>
      new Array(3).fill(0).map(() => ({ name: faker.music.genre() })))(),
    id: 666,
    isSeries: true,
    lists: ["250 –ª—É—á—à–∏—Ö —Å–µ—Ä–∏–∞–ª–æ–≤"],
    logo: { url: faker.helpers.arrayElement([faker.word.sample(), null]) },
    movieLength: 120,
    name: "–ß–µ–ª–æ–≤–µ–∫ –ø–∞—É–∫",
    names: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      language: faker.helpers.arrayElement([faker.word.sample(), null]),
      name: faker.word.sample(),
      type: faker.helpers.arrayElement([faker.word.sample(), null]),
    })),
    networks: {
      items: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        logo: { url: faker.helpers.arrayElement([faker.word.sample(), null]) },
        name: "Netflix",
      })),
    },
    persons: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      description: faker.helpers.arrayElement([
        "1987 –≥–æ–¥. –î–∂–æ—Ä–¥–∞–Ω –ë–µ–ª—Ñ–æ—Ä—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –±—Ä–æ–∫–µ—Ä–æ–º –≤ —É—Å–ø–µ—à–Ω–æ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–º –±–∞–Ω–∫–µ. –í—Å–∫–æ—Ä–µ –±–∞–Ω–∫ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤–Ω–µ–∑–∞–ø–Ω–æ–≥–æ –æ–±–≤–∞–ª–∞ –∏–Ω–¥–µ–∫—Å–∞ –î–æ—É-–î–∂–æ–Ω—Å–∞. –ü–æ —Å–æ–≤–µ—Ç—É –∂–µ–Ω—ã –¢–µ—Ä–µ–∑—ã –î–∂–æ—Ä–¥–∞–Ω —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤ –Ω–µ–±–æ–ª—å—à–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ, –∑–∞–Ω–∏–º–∞—é—â–µ–µ—Å—è –º–µ–ª–∫–∏–º–∏ –∞–∫—Ü–∏—è–º–∏. –ï–≥–æ –Ω–∞—Å—Ç–æ–π—á–∏–≤—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ –≤—Ä–æ–∂–¥—ë–Ω–Ω–∞—è —Ö–∞—Ä–∏–∑–º–∞ –±—ã—Å—Ç—Ä–æ –¥–∞—ë—Ç —Å–≤–æ–∏ –ø–ª–æ–¥—ã. –û–Ω –∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å —Å–æ—Å–µ–¥–æ–º –ø–æ –¥–æ–º—É –î–æ–Ω–Ω–∏, —Ç–æ—Ä–≥–æ–≤—Ü–µ–º, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–∑—É –Ω–∞—Ö–æ–¥–∏—Ç –æ–±—â–∏–π —è–∑—ã–∫ —Å –î–∂–æ—Ä–¥–∞–Ω–æ–º –∏ —Ä–µ—à–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç—å —Å –Ω–∏–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Ñ–∏—Ä–º—É. –í –∫–∞—á–µ—Å—Ç–≤–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –æ–Ω–∏ –Ω–∞–Ω–∏–º–∞—é—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥—Ä—É–∑–µ–π –ë–µ–ª—Ñ–æ—Ä—Ç–∞, –µ–≥–æ –æ—Ç—Ü–∞ –ú–∞–∫—Å–∞ –∏ –Ω–∞–∑—ã–≤–∞—é—Ç –∫–æ–º–ø–∞–Ω–∏—é ¬´–°—Ç—Ä—ç—Ç—Ç–æ–Ω –û—É–∫–º–æ–Ω—Ç¬ª. –í —Å–≤–æ–±–æ–¥–Ω–æ–µ –æ—Ç —Ä–∞–±–æ—Ç—ã –≤—Ä–µ–º—è –î–∂–æ—Ä–¥–∞–Ω –ø—Ä–æ–∂–∏–≥–∞–µ—Ç –∂–∏–∑–Ω—å: –ª–∞–≤–∏—Ä—É–µ—Ç –æ—Ç –æ–¥–Ω–æ–π –≤–µ—á–µ—Ä–∏–Ω–∫–∏ –∫ –¥—Ä—É–≥–æ–π, –≤—Å—Ç—É–ø–∞–µ—Ç –≤ —Å–µ–∫—Å—É–∞–ª—å–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ø—Ä–æ—Å—Ç–∏—Ç—É—Ç–∫–∞–º–∏, —É–ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –Ω–∞—Ä–∫–æ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤, –≤ —Ç–æ–º —á–∏—Å–ª–µ –∫–æ–∫–∞–∏–Ω –∏ –∫–≤–∞–∞–ª—é–¥. –û–¥–Ω–∞–∂–¥—ã –Ω–∞—Å—Ç—É–ø–∞–µ—Ç –º–æ–º–µ–Ω—Ç, –∫–æ–≥–¥–∞ –±—ã—Å—Ç—Ä—ã–º –æ–±–æ–≥–∞—â–µ–Ω–∏–µ–º –ë–µ–ª—Ñ–æ—Ä—Ç–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å—Å—è –∞–≥–µ–Ω—Ç –§–ë–†...",
        null,
      ]),
      enName: "Paul Walker",
      enProfession: faker.helpers.arrayElement([faker.word.sample(), null]),
      id: 6317,
      name: "–ü–æ–ª –£–æ–∫–µ—Ä",
      photo: "https://st.kp.yandex.net/images/actor_iphone/iphone360_6317.jpg",
      profession: faker.helpers.arrayElement([faker.word.sample(), null]),
    })),
    poster: {
      url: "https://image.openmoviedb.com/kinopoisk-images/1946459/5c758ac0-7a5c-4f00-a94f-1be680a312fb/orig",
      previewUrl:
        "https://image.openmoviedb.com/kinopoisk-images/1946459/5c758ac0-7a5c-4f00-a94f-1be680a312fb/x1000",
    },
    premiere: {
      bluray: faker.helpers.arrayElement([faker.word.sample(), null]),
      cinema: "2023-02-25T02:44:39.359Z",
      country: "–°–®–ê",
      digital: faker.helpers.arrayElement([faker.word.sample(), null]),
      dvd: faker.helpers.arrayElement([faker.word.sample(), null]),
      russia: "2023-02-25T02:44:39.359Z",
      world: "2023-02-25T02:44:39.359Z",
    },
    rating: {
      await: 6.1,
      filmCritics: 10,
      imdb: 8.4,
      kp: 6.2,
      russianFilmCritics: 5.1,
      tmdb: 3.2,
    },
    ratingMpaa: "pg13",
    releaseYears: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({ end: 2023, start: 2022 })),
    reviewInfo: {
      count: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        null,
      ]),
      percentage: faker.helpers.arrayElement([faker.word.sample(), null]),
      positiveCount: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        null,
      ]),
    },
    seasonsInfo: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      episodesCount: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        null,
      ]),
      number: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        null,
      ]),
    })),
    sequelsAndPrequels: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      alternativeName: faker.helpers.arrayElement([faker.word.sample(), null]),
      enName: faker.helpers.arrayElement([faker.word.sample(), null]),
      id: faker.number.int({ min: undefined, max: undefined }),
      name: faker.helpers.arrayElement([faker.word.sample(), null]),
      poster: faker.helpers.arrayElement([
        {
          url: "https://image.openmoviedb.com/kinopoisk-images/1946459/5c758ac0-7a5c-4f00-a94f-1be680a312fb/orig",
          previewUrl:
            "https://image.openmoviedb.com/kinopoisk-images/1946459/5c758ac0-7a5c-4f00-a94f-1be680a312fb/x1000",
        },
        null,
      ]),
      rating: {
        await: 6.1,
        filmCritics: 10,
        imdb: 8.4,
        kp: 6.2,
        russianFilmCritics: 5.1,
        tmdb: 3.2,
      },
      type: faker.helpers.arrayElement([faker.word.sample(), null]),
      year: 2021,
    })),
    seriesLength: 20,
    shortDescription: faker.helpers.arrayElement([
      "–í–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ —Ü–∏–Ω–∏–∫–∞-–≥–µ–¥–æ–Ω–∏—Å—Ç–∞ –Ω–∞ –±–∏–∑–Ω–µ—Å-–æ–ª–∏–º–ø 1980-—Ö. –ë–ª–∏—Å—Ç–∞—Ç–µ–ª—å–Ω—ã–π —Ç–∞–Ω–¥–µ–º –õ–µ–æ–Ω–∞—Ä–¥–æ –î–∏–ö–∞–ø—Ä–∏–æ –∏ –ú–∞—Ä—Ç–∏–Ω–∞ –°–∫–æ—Ä—Å–µ–∑–µ",
      null,
    ]),
    similarMovies: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      alternativeName: faker.helpers.arrayElement([faker.word.sample(), null]),
      enName: faker.helpers.arrayElement([faker.word.sample(), null]),
      id: faker.number.int({ min: undefined, max: undefined }),
      name: faker.helpers.arrayElement([faker.word.sample(), null]),
      poster: faker.helpers.arrayElement([
        {
          url: "https://image.openmoviedb.com/kinopoisk-images/1946459/5c758ac0-7a5c-4f00-a94f-1be680a312fb/orig",
          previewUrl:
            "https://image.openmoviedb.com/kinopoisk-images/1946459/5c758ac0-7a5c-4f00-a94f-1be680a312fb/x1000",
        },
        null,
      ]),
      rating: {
        await: 6.1,
        filmCritics: 10,
        imdb: 8.4,
        kp: 6.2,
        russianFilmCritics: 5.1,
        tmdb: 3.2,
      },
      type: faker.helpers.arrayElement([faker.word.sample(), null]),
      year: 2021,
    })),
    slogan: faker.helpers.arrayElement([faker.word.sample(), null]),
    status: "completed",
    ticketsOnSale: true,
    top10: 1,
    top250: 200,
    totalSeriesLength: 155,
    type: "movie",
    typeNumber: 1,
    updatedAt: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      null,
    ]),
    videos: {
      trailers: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        name: "Official Trailer",
        site: "youtube",
        size: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        type: "TRAILER",
        url: "https://www.youtube.com/embed/ZsJz2TJAPjw",
      })),
    },
    votes: {
      await: 34000,
      filmCritics: 10000,
      imdb: 50000,
      kp: 60000,
      russianFilmCritics: 4000,
      tmdb: 10000,
    },
    watchability: {
      items: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        logo: { url: faker.helpers.arrayElement([faker.word.sample(), null]) },
        name: faker.helpers.arrayElement([faker.word.sample(), null]),
        url: faker.word.sample(),
      })),
    },
    year: 2023,
  })),
  limit: faker.number.int({ min: undefined, max: undefined }),
  page: faker.number.int({ min: undefined, max: undefined }),
  pages: faker.number.int({ min: undefined, max: undefined }),
  total: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getMovieControllerSearchMovieV14ResponseMock = (
  overrideResponse: Partial<SearchMovieResponseDtoV14> = {},
): SearchMovieResponseDtoV14 => ({
  docs: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    ageRating: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      null,
    ]),
    alternativeName: faker.helpers.arrayElement([faker.word.sample(), null]),
    backdrop: {
      previewUrl: faker.helpers.arrayElement([faker.word.sample(), null]),
      url: faker.helpers.arrayElement([faker.word.sample(), null]),
    },
    countries: faker.helpers.arrayElement([
      (() =>
        new Array(3).fill(0).map(() => ({ name: faker.location.country() })))(),
      null,
    ]),
    description: faker.helpers.arrayElement([
      "1987 –≥–æ–¥. –î–∂–æ—Ä–¥–∞–Ω –ë–µ–ª—Ñ–æ—Ä—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –±—Ä–æ–∫–µ—Ä–æ–º –≤ —É—Å–ø–µ—à–Ω–æ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–º –±–∞–Ω–∫–µ. –í—Å–∫–æ—Ä–µ –±–∞–Ω–∫ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤–Ω–µ–∑–∞–ø–Ω–æ–≥–æ –æ–±–≤–∞–ª–∞ –∏–Ω–¥–µ–∫—Å–∞ –î–æ—É-–î–∂–æ–Ω—Å–∞. –ü–æ —Å–æ–≤–µ—Ç—É –∂–µ–Ω—ã –¢–µ—Ä–µ–∑—ã –î–∂–æ—Ä–¥–∞–Ω —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤ –Ω–µ–±–æ–ª—å—à–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ, –∑–∞–Ω–∏–º–∞—é—â–µ–µ—Å—è –º–µ–ª–∫–∏–º–∏ –∞–∫—Ü–∏—è–º–∏. –ï–≥–æ –Ω–∞—Å—Ç–æ–π—á–∏–≤—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ –≤—Ä–æ–∂–¥—ë–Ω–Ω–∞—è —Ö–∞—Ä–∏–∑–º–∞ –±—ã—Å—Ç—Ä–æ –¥–∞—ë—Ç —Å–≤–æ–∏ –ø–ª–æ–¥—ã. –û–Ω –∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å —Å–æ—Å–µ–¥–æ–º –ø–æ –¥–æ–º—É –î–æ–Ω–Ω–∏, —Ç–æ—Ä–≥–æ–≤—Ü–µ–º, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–∑—É –Ω–∞—Ö–æ–¥–∏—Ç –æ–±—â–∏–π —è–∑—ã–∫ —Å –î–∂–æ—Ä–¥–∞–Ω–æ–º –∏ —Ä–µ—à–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç—å —Å –Ω–∏–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Ñ–∏—Ä–º—É. –í –∫–∞—á–µ—Å—Ç–≤–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –æ–Ω–∏ –Ω–∞–Ω–∏–º–∞—é—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥—Ä—É–∑–µ–π –ë–µ–ª—Ñ–æ—Ä—Ç–∞, –µ–≥–æ –æ—Ç—Ü–∞ –ú–∞–∫—Å–∞ –∏ –Ω–∞–∑—ã–≤–∞—é—Ç –∫–æ–º–ø–∞–Ω–∏—é ¬´–°—Ç—Ä—ç—Ç—Ç–æ–Ω –û—É–∫–º–æ–Ω—Ç¬ª. –í —Å–≤–æ–±–æ–¥–Ω–æ–µ –æ—Ç —Ä–∞–±–æ—Ç—ã –≤—Ä–µ–º—è –î–∂–æ—Ä–¥–∞–Ω –ø—Ä–æ–∂–∏–≥–∞–µ—Ç –∂–∏–∑–Ω—å: –ª–∞–≤–∏—Ä—É–µ—Ç –æ—Ç –æ–¥–Ω–æ–π –≤–µ—á–µ—Ä–∏–Ω–∫–∏ –∫ –¥—Ä—É–≥–æ–π, –≤—Å—Ç—É–ø–∞–µ—Ç –≤ —Å–µ–∫—Å—É–∞–ª—å–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ø—Ä–æ—Å—Ç–∏—Ç—É—Ç–∫–∞–º–∏, —É–ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –Ω–∞—Ä–∫–æ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤, –≤ —Ç–æ–º —á–∏—Å–ª–µ –∫–æ–∫–∞–∏–Ω –∏ –∫–≤–∞–∞–ª—é–¥. –û–¥–Ω–∞–∂–¥—ã –Ω–∞—Å—Ç—É–ø–∞–µ—Ç –º–æ–º–µ–Ω—Ç, –∫–æ–≥–¥–∞ –±—ã—Å—Ç—Ä—ã–º –æ–±–æ–≥–∞—â–µ–Ω–∏–µ–º –ë–µ–ª—Ñ–æ—Ä—Ç–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å—Å—è –∞–≥–µ–Ω—Ç –§–ë–†...",
      null,
    ]),
    enName: faker.helpers.arrayElement([faker.word.sample(), null]),
    externalId: {
      imdb: "tt0232500",
      kpHD: "48e8d0acb0f62d8585101798eaeceec5",
      tmdb: 9799,
    },
    genres: faker.helpers.arrayElement([
      (() => new Array(3).fill(0).map(() => ({ name: faker.music.genre() })))(),
      null,
    ]),
    id: faker.number.int({ min: undefined, max: undefined }),
    isSeries: faker.datatype.boolean(),
    logo: { url: faker.helpers.arrayElement([faker.word.sample(), null]) },
    movieLength: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      null,
    ]),
    name: faker.helpers.arrayElement([faker.word.sample(), null]),
    names: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      language: faker.helpers.arrayElement([faker.word.sample(), null]),
      name: faker.word.sample(),
      type: faker.helpers.arrayElement([faker.word.sample(), null]),
    })),
    poster: faker.helpers.arrayElement([
      {
        url: "https://image.openmoviedb.com/kinopoisk-images/1946459/5c758ac0-7a5c-4f00-a94f-1be680a312fb/orig",
        previewUrl:
          "https://image.openmoviedb.com/kinopoisk-images/1946459/5c758ac0-7a5c-4f00-a94f-1be680a312fb/x1000",
      },
      null,
    ]),
    rating: {
      await: 6.1,
      filmCritics: 10,
      imdb: 8.4,
      kp: 6.2,
      russianFilmCritics: 5.1,
      tmdb: 3.2,
    },
    ratingMpaa: faker.helpers.arrayElement([faker.word.sample(), null]),
    releaseYears: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({ end: 2023, start: 2022 })),
    seriesLength: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      null,
    ]),
    shortDescription: faker.helpers.arrayElement([
      "–í–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ —Ü–∏–Ω–∏–∫–∞-–≥–µ–¥–æ–Ω–∏—Å—Ç–∞ –Ω–∞ –±–∏–∑–Ω–µ—Å-–æ–ª–∏–º–ø 1980-—Ö. –ë–ª–∏—Å—Ç–∞—Ç–µ–ª—å–Ω—ã–π —Ç–∞–Ω–¥–µ–º –õ–µ–æ–Ω–∞—Ä–¥–æ –î–∏–ö–∞–ø—Ä–∏–æ –∏ –ú–∞—Ä—Ç–∏–Ω–∞ –°–∫–æ—Ä—Å–µ–∑–µ",
      null,
    ]),
    status: faker.helpers.arrayElement([faker.word.sample(), null]),
    ticketsOnSale: faker.datatype.boolean(),
    top10: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      null,
    ]),
    top250: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      null,
    ]),
    totalSeriesLength: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      null,
    ]),
    type: faker.helpers.arrayElement([faker.word.sample(), null]),
    typeNumber: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      null,
    ]),
    votes: {
      await: 34000,
      filmCritics: 10000,
      imdb: 50000,
      kp: 60000,
      russianFilmCritics: 4000,
      tmdb: 10000,
    },
    year: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      null,
    ]),
  })),
  limit: faker.number.int({ min: undefined, max: undefined }),
  page: faker.number.int({ min: undefined, max: undefined }),
  pages: faker.number.int({ min: undefined, max: undefined }),
  total: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getMovieControllerGetRandomMovieV14ResponseMock = (
  overrideResponse: Partial<MovieDtoV14> = {},
): MovieDtoV14 => ({
  ageRating: "16",
  alternativeName: "Spider man",
  audience: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({ count: 1000, country: "–†–æ—Å—Å–∏—è" })),
  backdrop: {
    previewUrl: faker.helpers.arrayElement([faker.word.sample(), null]),
    url: faker.helpers.arrayElement([faker.word.sample(), null]),
  },
  budget: { currency: "‚Ç¨", value: 207283 },
  countries: (() =>
    new Array(3).fill(0).map(() => ({ name: faker.location.country() })))(),
  createdAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    null,
  ]),
  description: faker.helpers.arrayElement([
    "1987 –≥–æ–¥. –î–∂–æ—Ä–¥–∞–Ω –ë–µ–ª—Ñ–æ—Ä—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –±—Ä–æ–∫–µ—Ä–æ–º –≤ —É—Å–ø–µ—à–Ω–æ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–º –±–∞–Ω–∫–µ. –í—Å–∫–æ—Ä–µ –±–∞–Ω–∫ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤–Ω–µ–∑–∞–ø–Ω–æ–≥–æ –æ–±–≤–∞–ª–∞ –∏–Ω–¥–µ–∫—Å–∞ –î–æ—É-–î–∂–æ–Ω—Å–∞. –ü–æ —Å–æ–≤–µ—Ç—É –∂–µ–Ω—ã –¢–µ—Ä–µ–∑—ã –î–∂–æ—Ä–¥–∞–Ω —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤ –Ω–µ–±–æ–ª—å—à–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ, –∑–∞–Ω–∏–º–∞—é—â–µ–µ—Å—è –º–µ–ª–∫–∏–º–∏ –∞–∫—Ü–∏—è–º–∏. –ï–≥–æ –Ω–∞—Å—Ç–æ–π—á–∏–≤—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ –≤—Ä–æ–∂–¥—ë–Ω–Ω–∞—è —Ö–∞—Ä–∏–∑–º–∞ –±—ã—Å—Ç—Ä–æ –¥–∞—ë—Ç —Å–≤–æ–∏ –ø–ª–æ–¥—ã. –û–Ω –∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å —Å–æ—Å–µ–¥–æ–º –ø–æ –¥–æ–º—É –î–æ–Ω–Ω–∏, —Ç–æ—Ä–≥–æ–≤—Ü–µ–º, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–∑—É –Ω–∞—Ö–æ–¥–∏—Ç –æ–±—â–∏–π —è–∑—ã–∫ —Å –î–∂–æ—Ä–¥–∞–Ω–æ–º –∏ —Ä–µ—à–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç—å —Å –Ω–∏–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Ñ–∏—Ä–º—É. –í –∫–∞—á–µ—Å—Ç–≤–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –æ–Ω–∏ –Ω–∞–Ω–∏–º–∞—é—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥—Ä—É–∑–µ–π –ë–µ–ª—Ñ–æ—Ä—Ç–∞, –µ–≥–æ –æ—Ç—Ü–∞ –ú–∞–∫—Å–∞ –∏ –Ω–∞–∑—ã–≤–∞—é—Ç –∫–æ–º–ø–∞–Ω–∏—é ¬´–°—Ç—Ä—ç—Ç—Ç–æ–Ω –û—É–∫–º–æ–Ω—Ç¬ª. –í —Å–≤–æ–±–æ–¥–Ω–æ–µ –æ—Ç —Ä–∞–±–æ—Ç—ã –≤—Ä–µ–º—è –î–∂–æ—Ä–¥–∞–Ω –ø—Ä–æ–∂–∏–≥–∞–µ—Ç –∂–∏–∑–Ω—å: –ª–∞–≤–∏—Ä—É–µ—Ç –æ—Ç –æ–¥–Ω–æ–π –≤–µ—á–µ—Ä–∏–Ω–∫–∏ –∫ –¥—Ä—É–≥–æ–π, –≤—Å—Ç—É–ø–∞–µ—Ç –≤ —Å–µ–∫—Å—É–∞–ª—å–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ø—Ä–æ—Å—Ç–∏—Ç—É—Ç–∫–∞–º–∏, —É–ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –Ω–∞—Ä–∫–æ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤, –≤ —Ç–æ–º —á–∏—Å–ª–µ –∫–æ–∫–∞–∏–Ω –∏ –∫–≤–∞–∞–ª—é–¥. –û–¥–Ω–∞–∂–¥—ã –Ω–∞—Å—Ç—É–ø–∞–µ—Ç –º–æ–º–µ–Ω—Ç, –∫–æ–≥–¥–∞ –±—ã—Å—Ç—Ä—ã–º –æ–±–æ–≥–∞—â–µ–Ω–∏–µ–º –ë–µ–ª—Ñ–æ—Ä—Ç–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å—Å—è –∞–≥–µ–Ω—Ç –§–ë–†...",
    null,
  ]),
  enName: "Spider man",
  externalId: {
    imdb: "tt0232500",
    kpHD: "48e8d0acb0f62d8585101798eaeceec5",
    tmdb: 9799,
  },
  facts: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    spoiler: faker.datatype.boolean(),
    type: faker.helpers.arrayElement([faker.word.sample(), null]),
    value: faker.word.sample(),
  })),
  fees: {
    russia: { currency: "‚Ç¨", value: 207283 },
    usa: { currency: "‚Ç¨", value: 207283 },
    world: { currency: "‚Ç¨", value: 207283 },
  },
  genres: (() =>
    new Array(3).fill(0).map(() => ({ name: faker.music.genre() })))(),
  id: 666,
  isSeries: true,
  lists: ["250 –ª—É—á—à–∏—Ö —Å–µ—Ä–∏–∞–ª–æ–≤"],
  logo: { url: faker.helpers.arrayElement([faker.word.sample(), null]) },
  movieLength: 120,
  name: "–ß–µ–ª–æ–≤–µ–∫ –ø–∞—É–∫",
  names: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    language: faker.helpers.arrayElement([faker.word.sample(), null]),
    name: faker.word.sample(),
    type: faker.helpers.arrayElement([faker.word.sample(), null]),
  })),
  networks: {
    items: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      logo: { url: faker.helpers.arrayElement([faker.word.sample(), null]) },
      name: "Netflix",
    })),
  },
  persons: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    description: faker.helpers.arrayElement([
      "1987 –≥–æ–¥. –î–∂–æ—Ä–¥–∞–Ω –ë–µ–ª—Ñ–æ—Ä—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –±—Ä–æ–∫–µ—Ä–æ–º –≤ —É—Å–ø–µ—à–Ω–æ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–º –±–∞–Ω–∫–µ. –í—Å–∫–æ—Ä–µ –±–∞–Ω–∫ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤–Ω–µ–∑–∞–ø–Ω–æ–≥–æ –æ–±–≤–∞–ª–∞ –∏–Ω–¥–µ–∫—Å–∞ –î–æ—É-–î–∂–æ–Ω—Å–∞. –ü–æ —Å–æ–≤–µ—Ç—É –∂–µ–Ω—ã –¢–µ—Ä–µ–∑—ã –î–∂–æ—Ä–¥–∞–Ω —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤ –Ω–µ–±–æ–ª—å—à–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ, –∑–∞–Ω–∏–º–∞—é—â–µ–µ—Å—è –º–µ–ª–∫–∏–º–∏ –∞–∫—Ü–∏—è–º–∏. –ï–≥–æ –Ω–∞—Å—Ç–æ–π—á–∏–≤—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ –≤—Ä–æ–∂–¥—ë–Ω–Ω–∞—è —Ö–∞—Ä–∏–∑–º–∞ –±—ã—Å—Ç—Ä–æ –¥–∞—ë—Ç —Å–≤–æ–∏ –ø–ª–æ–¥—ã. –û–Ω –∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å —Å–æ—Å–µ–¥–æ–º –ø–æ –¥–æ–º—É –î–æ–Ω–Ω–∏, —Ç–æ—Ä–≥–æ–≤—Ü–µ–º, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–∑—É –Ω–∞—Ö–æ–¥–∏—Ç –æ–±—â–∏–π —è–∑—ã–∫ —Å –î–∂–æ—Ä–¥–∞–Ω–æ–º –∏ —Ä–µ—à–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç—å —Å –Ω–∏–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Ñ–∏—Ä–º—É. –í –∫–∞—á–µ—Å—Ç–≤–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –æ–Ω–∏ –Ω–∞–Ω–∏–º–∞—é—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥—Ä—É–∑–µ–π –ë–µ–ª—Ñ–æ—Ä—Ç–∞, –µ–≥–æ –æ—Ç—Ü–∞ –ú–∞–∫—Å–∞ –∏ –Ω–∞–∑—ã–≤–∞—é—Ç –∫–æ–º–ø–∞–Ω–∏—é ¬´–°—Ç—Ä—ç—Ç—Ç–æ–Ω –û—É–∫–º–æ–Ω—Ç¬ª. –í —Å–≤–æ–±–æ–¥–Ω–æ–µ –æ—Ç —Ä–∞–±–æ—Ç—ã –≤—Ä–µ–º—è –î–∂–æ—Ä–¥–∞–Ω –ø—Ä–æ–∂–∏–≥–∞–µ—Ç –∂–∏–∑–Ω—å: –ª–∞–≤–∏—Ä—É–µ—Ç –æ—Ç –æ–¥–Ω–æ–π –≤–µ—á–µ—Ä–∏–Ω–∫–∏ –∫ –¥—Ä—É–≥–æ–π, –≤—Å—Ç—É–ø–∞–µ—Ç –≤ —Å–µ–∫—Å—É–∞–ª—å–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ø—Ä–æ—Å—Ç–∏—Ç—É—Ç–∫–∞–º–∏, —É–ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –Ω–∞—Ä–∫–æ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤, –≤ —Ç–æ–º —á–∏—Å–ª–µ –∫–æ–∫–∞–∏–Ω –∏ –∫–≤–∞–∞–ª—é–¥. –û–¥–Ω–∞–∂–¥—ã –Ω–∞—Å—Ç—É–ø–∞–µ—Ç –º–æ–º–µ–Ω—Ç, –∫–æ–≥–¥–∞ –±—ã—Å—Ç—Ä—ã–º –æ–±–æ–≥–∞—â–µ–Ω–∏–µ–º –ë–µ–ª—Ñ–æ—Ä—Ç–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å—Å—è –∞–≥–µ–Ω—Ç –§–ë–†...",
      null,
    ]),
    enName: "Paul Walker",
    enProfession: faker.helpers.arrayElement([faker.word.sample(), null]),
    id: 6317,
    name: "–ü–æ–ª –£–æ–∫–µ—Ä",
    photo: "https://st.kp.yandex.net/images/actor_iphone/iphone360_6317.jpg",
    profession: faker.helpers.arrayElement([faker.word.sample(), null]),
  })),
  poster: {
    url: "https://image.openmoviedb.com/kinopoisk-images/1946459/5c758ac0-7a5c-4f00-a94f-1be680a312fb/orig",
    previewUrl:
      "https://image.openmoviedb.com/kinopoisk-images/1946459/5c758ac0-7a5c-4f00-a94f-1be680a312fb/x1000",
  },
  premiere: {
    bluray: faker.helpers.arrayElement([faker.word.sample(), null]),
    cinema: "2023-02-25T02:44:39.359Z",
    country: "–°–®–ê",
    digital: faker.helpers.arrayElement([faker.word.sample(), null]),
    dvd: faker.helpers.arrayElement([faker.word.sample(), null]),
    russia: "2023-02-25T02:44:39.359Z",
    world: "2023-02-25T02:44:39.359Z",
  },
  rating: {
    await: 6.1,
    filmCritics: 10,
    imdb: 8.4,
    kp: 6.2,
    russianFilmCritics: 5.1,
    tmdb: 3.2,
  },
  ratingMpaa: "pg13",
  releaseYears: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({ end: 2023, start: 2022 })),
  reviewInfo: {
    count: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      null,
    ]),
    percentage: faker.helpers.arrayElement([faker.word.sample(), null]),
    positiveCount: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      null,
    ]),
  },
  seasonsInfo: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    episodesCount: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      null,
    ]),
    number: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      null,
    ]),
  })),
  sequelsAndPrequels: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    alternativeName: faker.helpers.arrayElement([faker.word.sample(), null]),
    enName: faker.helpers.arrayElement([faker.word.sample(), null]),
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.helpers.arrayElement([faker.word.sample(), null]),
    poster: faker.helpers.arrayElement([
      {
        url: "https://image.openmoviedb.com/kinopoisk-images/1946459/5c758ac0-7a5c-4f00-a94f-1be680a312fb/orig",
        previewUrl:
          "https://image.openmoviedb.com/kinopoisk-images/1946459/5c758ac0-7a5c-4f00-a94f-1be680a312fb/x1000",
      },
      null,
    ]),
    rating: {
      await: 6.1,
      filmCritics: 10,
      imdb: 8.4,
      kp: 6.2,
      russianFilmCritics: 5.1,
      tmdb: 3.2,
    },
    type: faker.helpers.arrayElement([faker.word.sample(), null]),
    year: 2021,
  })),
  seriesLength: 20,
  shortDescription: faker.helpers.arrayElement([
    "–í–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ —Ü–∏–Ω–∏–∫–∞-–≥–µ–¥–æ–Ω–∏—Å—Ç–∞ –Ω–∞ –±–∏–∑–Ω–µ—Å-–æ–ª–∏–º–ø 1980-—Ö. –ë–ª–∏—Å—Ç–∞—Ç–µ–ª—å–Ω—ã–π —Ç–∞–Ω–¥–µ–º –õ–µ–æ–Ω–∞—Ä–¥–æ –î–∏–ö–∞–ø—Ä–∏–æ –∏ –ú–∞—Ä—Ç–∏–Ω–∞ –°–∫–æ—Ä—Å–µ–∑–µ",
    null,
  ]),
  similarMovies: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    alternativeName: faker.helpers.arrayElement([faker.word.sample(), null]),
    enName: faker.helpers.arrayElement([faker.word.sample(), null]),
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.helpers.arrayElement([faker.word.sample(), null]),
    poster: faker.helpers.arrayElement([
      {
        url: "https://image.openmoviedb.com/kinopoisk-images/1946459/5c758ac0-7a5c-4f00-a94f-1be680a312fb/orig",
        previewUrl:
          "https://image.openmoviedb.com/kinopoisk-images/1946459/5c758ac0-7a5c-4f00-a94f-1be680a312fb/x1000",
      },
      null,
    ]),
    rating: {
      await: 6.1,
      filmCritics: 10,
      imdb: 8.4,
      kp: 6.2,
      russianFilmCritics: 5.1,
      tmdb: 3.2,
    },
    type: faker.helpers.arrayElement([faker.word.sample(), null]),
    year: 2021,
  })),
  slogan: faker.helpers.arrayElement([faker.word.sample(), null]),
  status: "completed",
  ticketsOnSale: true,
  top10: 1,
  top250: 200,
  totalSeriesLength: 155,
  type: "movie",
  typeNumber: 1,
  updatedAt: faker.helpers.arrayElement([
    `${faker.date.past().toISOString().split(".")[0]}Z`,
    null,
  ]),
  videos: {
    trailers: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      name: "Official Trailer",
      site: "youtube",
      size: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        null,
      ]),
      type: "TRAILER",
      url: "https://www.youtube.com/embed/ZsJz2TJAPjw",
    })),
  },
  votes: {
    await: 34000,
    filmCritics: 10000,
    imdb: 50000,
    kp: 60000,
    russianFilmCritics: 4000,
    tmdb: 10000,
  },
  watchability: {
    items: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      logo: { url: faker.helpers.arrayElement([faker.word.sample(), null]) },
      name: faker.helpers.arrayElement([faker.word.sample(), null]),
      url: faker.word.sample(),
    })),
  },
  year: 2023,
  ...overrideResponse,
});

export const getMovieControllerFindManyAwardsV14ResponseMock = (
  overrideResponse: Partial<MovieAwardDocsResponseDto> = {},
): MovieAwardDocsResponseDto => ({
  docs: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    createdAt: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      null,
    ]),
    movieId: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      null,
    ]),
    nomination: {
      award: {
        title: faker.helpers.arrayElement([faker.word.sample(), null]),
        year: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
      },
      title: faker.helpers.arrayElement([faker.word.sample(), null]),
    },
    updatedAt: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      null,
    ]),
    winning: faker.datatype.boolean(),
  })),
  limit: faker.number.int({ min: undefined, max: undefined }),
  page: faker.number.int({ min: undefined, max: undefined }),
  pages: faker.number.int({ min: undefined, max: undefined }),
  total: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getMovieControllerGetPossibleValuesByFieldNameResponseMock =
  (): PossibleValueDto[] =>
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      name: faker.helpers.arrayElement([faker.word.sample(), null]),
      slug: faker.helpers.arrayElement([faker.word.sample(), null]),
    }));

export const getSeasonControllerFindManyV14ResponseMock = (
  overrideResponse: Partial<SeasonDocsResponseDtoV14> = {},
): SeasonDocsResponseDtoV14 => ({
  docs: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    airDate: faker.word.sample(),
    createdAt: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      null,
    ]),
    description:
      "1987 –≥–æ–¥. –î–∂–æ—Ä–¥–∞–Ω –ë–µ–ª—Ñ–æ—Ä—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –±—Ä–æ–∫–µ—Ä–æ–º –≤ —É—Å–ø–µ—à–Ω–æ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–º –±–∞–Ω–∫–µ. –í—Å–∫–æ—Ä–µ –±–∞–Ω–∫ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤–Ω–µ–∑–∞–ø–Ω–æ–≥–æ –æ–±–≤–∞–ª–∞ –∏–Ω–¥–µ–∫—Å–∞ –î–æ—É-–î–∂–æ–Ω—Å–∞. –ü–æ —Å–æ–≤–µ—Ç—É –∂–µ–Ω—ã –¢–µ—Ä–µ–∑—ã –î–∂–æ—Ä–¥–∞–Ω —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤ –Ω–µ–±–æ–ª—å—à–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ, –∑–∞–Ω–∏–º–∞—é—â–µ–µ—Å—è –º–µ–ª–∫–∏–º–∏ –∞–∫—Ü–∏—è–º–∏. –ï–≥–æ –Ω–∞—Å—Ç–æ–π—á–∏–≤—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ –≤—Ä–æ–∂–¥—ë–Ω–Ω–∞—è —Ö–∞—Ä–∏–∑–º–∞ –±—ã—Å—Ç—Ä–æ –¥–∞—ë—Ç —Å–≤–æ–∏ –ø–ª–æ–¥—ã. –û–Ω –∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å —Å–æ—Å–µ–¥–æ–º –ø–æ –¥–æ–º—É –î–æ–Ω–Ω–∏, —Ç–æ—Ä–≥–æ–≤—Ü–µ–º, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–∑—É –Ω–∞—Ö–æ–¥–∏—Ç –æ–±—â–∏–π —è–∑—ã–∫ —Å –î–∂–æ—Ä–¥–∞–Ω–æ–º –∏ —Ä–µ—à–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç—å —Å –Ω–∏–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Ñ–∏—Ä–º—É. –í –∫–∞—á–µ—Å—Ç–≤–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –æ–Ω–∏ –Ω–∞–Ω–∏–º–∞—é—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥—Ä—É–∑–µ–π –ë–µ–ª—Ñ–æ—Ä—Ç–∞, –µ–≥–æ –æ—Ç—Ü–∞ –ú–∞–∫—Å–∞ –∏ –Ω–∞–∑—ã–≤–∞—é—Ç –∫–æ–º–ø–∞–Ω–∏—é ¬´–°—Ç—Ä—ç—Ç—Ç–æ–Ω –û—É–∫–º–æ–Ω—Ç¬ª. –í —Å–≤–æ–±–æ–¥–Ω–æ–µ –æ—Ç —Ä–∞–±–æ—Ç—ã –≤—Ä–µ–º—è –î–∂–æ—Ä–¥–∞–Ω –ø—Ä–æ–∂–∏–≥–∞–µ—Ç –∂–∏–∑–Ω—å: –ª–∞–≤–∏—Ä—É–µ—Ç –æ—Ç –æ–¥–Ω–æ–π –≤–µ—á–µ—Ä–∏–Ω–∫–∏ –∫ –¥—Ä—É–≥–æ–π, –≤—Å—Ç—É–ø–∞–µ—Ç –≤ —Å–µ–∫—Å—É–∞–ª—å–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ø—Ä–æ—Å—Ç–∏—Ç—É—Ç–∫–∞–º–∏, —É–ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –Ω–∞—Ä–∫–æ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤, –≤ —Ç–æ–º —á–∏—Å–ª–µ –∫–æ–∫–∞–∏–Ω –∏ –∫–≤–∞–∞–ª—é–¥. –û–¥–Ω–∞–∂–¥—ã –Ω–∞—Å—Ç—É–ø–∞–µ—Ç –º–æ–º–µ–Ω—Ç, –∫–æ–≥–¥–∞ –±—ã—Å—Ç—Ä—ã–º –æ–±–æ–≥–∞—â–µ–Ω–∏–µ–º –ë–µ–ª—Ñ–æ—Ä—Ç–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å—Å—è –∞–≥–µ–Ω—Ç –§–ë–†...",
    duration: faker.number.int({ min: undefined, max: undefined }),
    enDescription: faker.word.sample(),
    enName: faker.word.sample(),
    episodes: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      airDate: faker.word.sample(),
      date: faker.word.sample(),
      description:
        "1987 –≥–æ–¥. –î–∂–æ—Ä–¥–∞–Ω –ë–µ–ª—Ñ–æ—Ä—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –±—Ä–æ–∫–µ—Ä–æ–º –≤ —É—Å–ø–µ—à–Ω–æ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–º –±–∞–Ω–∫–µ. –í—Å–∫–æ—Ä–µ –±–∞–Ω–∫ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤–Ω–µ–∑–∞–ø–Ω–æ–≥–æ –æ–±–≤–∞–ª–∞ –∏–Ω–¥–µ–∫—Å–∞ –î–æ—É-–î–∂–æ–Ω—Å–∞. –ü–æ —Å–æ–≤–µ—Ç—É –∂–µ–Ω—ã –¢–µ—Ä–µ–∑—ã –î–∂–æ—Ä–¥–∞–Ω —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤ –Ω–µ–±–æ–ª—å—à–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ, –∑–∞–Ω–∏–º–∞—é—â–µ–µ—Å—è –º–µ–ª–∫–∏–º–∏ –∞–∫—Ü–∏—è–º–∏. –ï–≥–æ –Ω–∞—Å—Ç–æ–π—á–∏–≤—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ –≤—Ä–æ–∂–¥—ë–Ω–Ω–∞—è —Ö–∞—Ä–∏–∑–º–∞ –±—ã—Å—Ç—Ä–æ –¥–∞—ë—Ç —Å–≤–æ–∏ –ø–ª–æ–¥—ã. –û–Ω –∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å —Å–æ—Å–µ–¥–æ–º –ø–æ –¥–æ–º—É –î–æ–Ω–Ω–∏, —Ç–æ—Ä–≥–æ–≤—Ü–µ–º, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–∑—É –Ω–∞—Ö–æ–¥–∏—Ç –æ–±—â–∏–π —è–∑—ã–∫ —Å –î–∂–æ—Ä–¥–∞–Ω–æ–º –∏ —Ä–µ—à–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç—å —Å –Ω–∏–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Ñ–∏—Ä–º—É. –í –∫–∞—á–µ—Å—Ç–≤–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –æ–Ω–∏ –Ω–∞–Ω–∏–º–∞—é—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥—Ä—É–∑–µ–π –ë–µ–ª—Ñ–æ—Ä—Ç–∞, –µ–≥–æ –æ—Ç—Ü–∞ –ú–∞–∫—Å–∞ –∏ –Ω–∞–∑—ã–≤–∞—é—Ç –∫–æ–º–ø–∞–Ω–∏—é ¬´–°—Ç—Ä—ç—Ç—Ç–æ–Ω –û—É–∫–º–æ–Ω—Ç¬ª. –í —Å–≤–æ–±–æ–¥–Ω–æ–µ –æ—Ç —Ä–∞–±–æ—Ç—ã –≤—Ä–µ–º—è –î–∂–æ—Ä–¥–∞–Ω –ø—Ä–æ–∂–∏–≥–∞–µ—Ç –∂–∏–∑–Ω—å: –ª–∞–≤–∏—Ä—É–µ—Ç –æ—Ç –æ–¥–Ω–æ–π –≤–µ—á–µ—Ä–∏–Ω–∫–∏ –∫ –¥—Ä—É–≥–æ–π, –≤—Å—Ç—É–ø–∞–µ—Ç –≤ —Å–µ–∫—Å—É–∞–ª—å–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ø—Ä–æ—Å—Ç–∏—Ç—É—Ç–∫–∞–º–∏, —É–ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –Ω–∞—Ä–∫–æ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤, –≤ —Ç–æ–º —á–∏—Å–ª–µ –∫–æ–∫–∞–∏–Ω –∏ –∫–≤–∞–∞–ª—é–¥. –û–¥–Ω–∞–∂–¥—ã –Ω–∞—Å—Ç—É–ø–∞–µ—Ç –º–æ–º–µ–Ω—Ç, –∫–æ–≥–¥–∞ –±—ã—Å—Ç—Ä—ã–º –æ–±–æ–≥–∞—â–µ–Ω–∏–µ–º –ë–µ–ª—Ñ–æ—Ä—Ç–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å—Å—è –∞–≥–µ–Ω—Ç –§–ë–†...",
      enDescription: faker.word.sample(),
      enName: faker.word.sample(),
      name: faker.word.sample(),
      number: faker.number.int({ min: undefined, max: undefined }),
      still: {
        previewUrl: faker.helpers.arrayElement([faker.word.sample(), null]),
        url: faker.helpers.arrayElement([faker.word.sample(), null]),
      },
    })),
    episodesCount: faker.number.int({ min: undefined, max: undefined }),
    movieId: faker.number.int({ min: undefined, max: undefined }),
    name: faker.word.sample(),
    number: faker.number.int({ min: undefined, max: undefined }),
    poster: {
      url: "https://image.openmoviedb.com/kinopoisk-images/1946459/5c758ac0-7a5c-4f00-a94f-1be680a312fb/orig",
      previewUrl:
        "https://image.openmoviedb.com/kinopoisk-images/1946459/5c758ac0-7a5c-4f00-a94f-1be680a312fb/x1000",
    },
    updatedAt: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      null,
    ]),
  })),
  limit: faker.number.int({ min: undefined, max: undefined }),
  page: faker.number.int({ min: undefined, max: undefined }),
  pages: faker.number.int({ min: undefined, max: undefined }),
  total: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getReviewControllerFindManyV14ResponseMock = (
  overrideResponse: Partial<ReviewDocsResponseDtoV14> = {},
): ReviewDocsResponseDtoV14 => ({
  docs: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    author: faker.word.sample(),
    authorId: faker.number.int({ min: undefined, max: undefined }),
    createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
    date: faker.word.sample(),
    id: faker.number.int({ min: undefined, max: undefined }),
    movieId: faker.number.int({ min: undefined, max: undefined }),
    review: faker.word.sample(),
    title: faker.word.sample(),
    type: faker.word.sample(),
    updatedAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
    userRating: faker.number.int({ min: undefined, max: undefined }),
  })),
  limit: faker.number.int({ min: undefined, max: undefined }),
  page: faker.number.int({ min: undefined, max: undefined }),
  pages: faker.number.int({ min: undefined, max: undefined }),
  total: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getPersonControllerFindOneV14ResponseMock = (
  overrideResponse: Partial<Person> = {},
): Person => ({
  age: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    null,
  ]),
  birthday: faker.helpers.arrayElement([faker.word.sample(), null]),
  birthPlace: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({ value: faker.word.sample() })),
  countAwards: faker.number.int({ min: undefined, max: undefined }),
  createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
  death: faker.helpers.arrayElement([faker.word.sample(), null]),
  deathPlace: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({ value: faker.word.sample() })),
  enName: faker.helpers.arrayElement([faker.word.sample(), null]),
  facts: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({ value: faker.word.sample() })),
  growth: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    null,
  ]),
  id: faker.number.int({ min: undefined, max: undefined }),
  movies: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    alternativeName: faker.helpers.arrayElement([faker.word.sample(), null]),
    description: faker.helpers.arrayElement([
      "1987 –≥–æ–¥. –î–∂–æ—Ä–¥–∞–Ω –ë–µ–ª—Ñ–æ—Ä—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –±—Ä–æ–∫–µ—Ä–æ–º –≤ —É—Å–ø–µ—à–Ω–æ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–º –±–∞–Ω–∫–µ. –í—Å–∫–æ—Ä–µ –±–∞–Ω–∫ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤–Ω–µ–∑–∞–ø–Ω–æ–≥–æ –æ–±–≤–∞–ª–∞ –∏–Ω–¥–µ–∫—Å–∞ –î–æ—É-–î–∂–æ–Ω—Å–∞. –ü–æ —Å–æ–≤–µ—Ç—É –∂–µ–Ω—ã –¢–µ—Ä–µ–∑—ã –î–∂–æ—Ä–¥–∞–Ω —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤ –Ω–µ–±–æ–ª—å—à–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ, –∑–∞–Ω–∏–º–∞—é—â–µ–µ—Å—è –º–µ–ª–∫–∏–º–∏ –∞–∫—Ü–∏—è–º–∏. –ï–≥–æ –Ω–∞—Å—Ç–æ–π—á–∏–≤—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ –≤—Ä–æ–∂–¥—ë–Ω–Ω–∞—è —Ö–∞—Ä–∏–∑–º–∞ –±—ã—Å—Ç—Ä–æ –¥–∞—ë—Ç —Å–≤–æ–∏ –ø–ª–æ–¥—ã. –û–Ω –∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å —Å–æ—Å–µ–¥–æ–º –ø–æ –¥–æ–º—É –î–æ–Ω–Ω–∏, —Ç–æ—Ä–≥–æ–≤—Ü–µ–º, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–∑—É –Ω–∞—Ö–æ–¥–∏—Ç –æ–±—â–∏–π —è–∑—ã–∫ —Å –î–∂–æ—Ä–¥–∞–Ω–æ–º –∏ —Ä–µ—à–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç—å —Å –Ω–∏–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Ñ–∏—Ä–º—É. –í –∫–∞—á–µ—Å—Ç–≤–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –æ–Ω–∏ –Ω–∞–Ω–∏–º–∞—é—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥—Ä—É–∑–µ–π –ë–µ–ª—Ñ–æ—Ä—Ç–∞, –µ–≥–æ –æ—Ç—Ü–∞ –ú–∞–∫—Å–∞ –∏ –Ω–∞–∑—ã–≤–∞—é—Ç –∫–æ–º–ø–∞–Ω–∏—é ¬´–°—Ç—Ä—ç—Ç—Ç–æ–Ω –û—É–∫–º–æ–Ω—Ç¬ª. –í —Å–≤–æ–±–æ–¥–Ω–æ–µ –æ—Ç —Ä–∞–±–æ—Ç—ã –≤—Ä–µ–º—è –î–∂–æ—Ä–¥–∞–Ω –ø—Ä–æ–∂–∏–≥–∞–µ—Ç –∂–∏–∑–Ω—å: –ª–∞–≤–∏—Ä—É–µ—Ç –æ—Ç –æ–¥–Ω–æ–π –≤–µ—á–µ—Ä–∏–Ω–∫–∏ –∫ –¥—Ä—É–≥–æ–π, –≤—Å—Ç—É–ø–∞–µ—Ç –≤ —Å–µ–∫—Å—É–∞–ª—å–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ø—Ä–æ—Å—Ç–∏—Ç—É—Ç–∫–∞–º–∏, —É–ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –Ω–∞—Ä–∫–æ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤, –≤ —Ç–æ–º —á–∏—Å–ª–µ –∫–æ–∫–∞–∏–Ω –∏ –∫–≤–∞–∞–ª—é–¥. –û–¥–Ω–∞–∂–¥—ã –Ω–∞—Å—Ç—É–ø–∞–µ—Ç –º–æ–º–µ–Ω—Ç, –∫–æ–≥–¥–∞ –±—ã—Å—Ç—Ä—ã–º –æ–±–æ–≥–∞—â–µ–Ω–∏–µ–º –ë–µ–ª—Ñ–æ—Ä—Ç–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å—Å—è –∞–≥–µ–Ω—Ç –§–ë–†...",
      null,
    ]),
    enProfession: faker.helpers.arrayElement([faker.word.sample(), null]),
    general: faker.datatype.boolean(),
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.helpers.arrayElement([faker.word.sample(), null]),
    rating: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      null,
    ]),
  })),
  name: faker.helpers.arrayElement([faker.word.sample(), null]),
  photo: faker.helpers.arrayElement([faker.word.sample(), null]),
  profession: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({ value: faker.word.sample() })),
  sex: faker.helpers.arrayElement([faker.word.sample(), null]),
  spouses: {
    children: faker.number.int({ min: undefined, max: undefined }),
    divorced: faker.datatype.boolean(),
    divorcedReason: faker.word.sample(),
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.word.sample(),
    relation: faker.word.sample(),
    sex: faker.word.sample(),
  },
  updatedAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
  ...overrideResponse,
});

export const getPersonControllerFindManyV14ResponseMock = (
  overrideResponse: Partial<PersonDocsResponseDtoV14> = {},
): PersonDocsResponseDtoV14 => ({
  docs: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    age: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      null,
    ]),
    birthday: faker.helpers.arrayElement([faker.word.sample(), null]),
    birthPlace: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({ value: faker.word.sample() })),
    countAwards: faker.number.int({ min: undefined, max: undefined }),
    createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
    death: faker.helpers.arrayElement([faker.word.sample(), null]),
    deathPlace: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({ value: faker.word.sample() })),
    enName: faker.helpers.arrayElement([faker.word.sample(), null]),
    facts: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({ value: faker.word.sample() })),
    growth: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      null,
    ]),
    id: faker.number.int({ min: undefined, max: undefined }),
    movies: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      alternativeName: faker.helpers.arrayElement([faker.word.sample(), null]),
      description: faker.helpers.arrayElement([
        "1987 –≥–æ–¥. –î–∂–æ—Ä–¥–∞–Ω –ë–µ–ª—Ñ–æ—Ä—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –±—Ä–æ–∫–µ—Ä–æ–º –≤ —É—Å–ø–µ—à–Ω–æ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–º –±–∞–Ω–∫–µ. –í—Å–∫–æ—Ä–µ –±–∞–Ω–∫ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤–Ω–µ–∑–∞–ø–Ω–æ–≥–æ –æ–±–≤–∞–ª–∞ –∏–Ω–¥–µ–∫—Å–∞ –î–æ—É-–î–∂–æ–Ω—Å–∞. –ü–æ —Å–æ–≤–µ—Ç—É –∂–µ–Ω—ã –¢–µ—Ä–µ–∑—ã –î–∂–æ—Ä–¥–∞–Ω —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤ –Ω–µ–±–æ–ª—å—à–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ, –∑–∞–Ω–∏–º–∞—é—â–µ–µ—Å—è –º–µ–ª–∫–∏–º–∏ –∞–∫—Ü–∏—è–º–∏. –ï–≥–æ –Ω–∞—Å—Ç–æ–π—á–∏–≤—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ –≤—Ä–æ–∂–¥—ë–Ω–Ω–∞—è —Ö–∞—Ä–∏–∑–º–∞ –±—ã—Å—Ç—Ä–æ –¥–∞—ë—Ç —Å–≤–æ–∏ –ø–ª–æ–¥—ã. –û–Ω –∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å —Å–æ—Å–µ–¥–æ–º –ø–æ –¥–æ–º—É –î–æ–Ω–Ω–∏, —Ç–æ—Ä–≥–æ–≤—Ü–µ–º, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–∑—É –Ω–∞—Ö–æ–¥–∏—Ç –æ–±—â–∏–π —è–∑—ã–∫ —Å –î–∂–æ—Ä–¥–∞–Ω–æ–º –∏ —Ä–µ—à–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç—å —Å –Ω–∏–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Ñ–∏—Ä–º—É. –í –∫–∞—á–µ—Å—Ç–≤–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –æ–Ω–∏ –Ω–∞–Ω–∏–º–∞—é—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥—Ä—É–∑–µ–π –ë–µ–ª—Ñ–æ—Ä—Ç–∞, –µ–≥–æ –æ—Ç—Ü–∞ –ú–∞–∫—Å–∞ –∏ –Ω–∞–∑—ã–≤–∞—é—Ç –∫–æ–º–ø–∞–Ω–∏—é ¬´–°—Ç—Ä—ç—Ç—Ç–æ–Ω –û—É–∫–º–æ–Ω—Ç¬ª. –í —Å–≤–æ–±–æ–¥–Ω–æ–µ –æ—Ç —Ä–∞–±–æ—Ç—ã –≤—Ä–µ–º—è –î–∂–æ—Ä–¥–∞–Ω –ø—Ä–æ–∂–∏–≥–∞–µ—Ç –∂–∏–∑–Ω—å: –ª–∞–≤–∏—Ä—É–µ—Ç –æ—Ç –æ–¥–Ω–æ–π –≤–µ—á–µ—Ä–∏–Ω–∫–∏ –∫ –¥—Ä—É–≥–æ–π, –≤—Å—Ç—É–ø–∞–µ—Ç –≤ —Å–µ–∫—Å—É–∞–ª—å–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –ø—Ä–æ—Å—Ç–∏—Ç—É—Ç–∫–∞–º–∏, —É–ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –Ω–∞—Ä–∫–æ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤, –≤ —Ç–æ–º —á–∏—Å–ª–µ –∫–æ–∫–∞–∏–Ω –∏ –∫–≤–∞–∞–ª—é–¥. –û–¥–Ω–∞–∂–¥—ã –Ω–∞—Å—Ç—É–ø–∞–µ—Ç –º–æ–º–µ–Ω—Ç, –∫–æ–≥–¥–∞ –±—ã—Å—Ç—Ä—ã–º –æ–±–æ–≥–∞—â–µ–Ω–∏–µ–º –ë–µ–ª—Ñ–æ—Ä—Ç–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å—Å—è –∞–≥–µ–Ω—Ç –§–ë–†...",
        null,
      ]),
      enProfession: faker.helpers.arrayElement([faker.word.sample(), null]),
      general: faker.datatype.boolean(),
      id: faker.number.int({ min: undefined, max: undefined }),
      name: faker.helpers.arrayElement([faker.word.sample(), null]),
      rating: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        null,
      ]),
    })),
    name: faker.helpers.arrayElement([faker.word.sample(), null]),
    photo: faker.helpers.arrayElement([faker.word.sample(), null]),
    profession: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({ value: faker.word.sample() })),
    sex: faker.helpers.arrayElement([faker.word.sample(), null]),
    spouses: {
      children: faker.number.int({ min: undefined, max: undefined }),
      divorced: faker.datatype.boolean(),
      divorcedReason: faker.word.sample(),
      id: faker.number.int({ min: undefined, max: undefined }),
      name: faker.word.sample(),
      relation: faker.word.sample(),
      sex: faker.word.sample(),
    },
    updatedAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
  })),
  limit: faker.number.int({ min: undefined, max: undefined }),
  page: faker.number.int({ min: undefined, max: undefined }),
  pages: faker.number.int({ min: undefined, max: undefined }),
  total: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getPersonControllerSearchPersonV14ResponseMock = (
  overrideResponse: Partial<SearchPersonResponseDtoV14> = {},
): SearchPersonResponseDtoV14 => ({
  docs: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    age: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      null,
    ]),
    birthday: faker.helpers.arrayElement([faker.word.sample(), null]),
    birthPlace: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({ value: faker.word.sample() })),
    death: faker.helpers.arrayElement([faker.word.sample(), null]),
    deathPlace: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({ value: faker.word.sample() })),
    enName: faker.helpers.arrayElement([faker.word.sample(), null]),
    growth: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      null,
    ]),
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.helpers.arrayElement([faker.word.sample(), null]),
    photo: faker.helpers.arrayElement([faker.word.sample(), null]),
    profession: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({ value: faker.word.sample() })),
    sex: faker.helpers.arrayElement([faker.word.sample(), null]),
  })),
  limit: faker.number.int({ min: undefined, max: undefined }),
  page: faker.number.int({ min: undefined, max: undefined }),
  pages: faker.number.int({ min: undefined, max: undefined }),
  total: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getPersonControllerFindManyAwardsV14ResponseMock = (
  overrideResponse: Partial<PersonAwardDocsResponseDto> = {},
): PersonAwardDocsResponseDto => ({
  docs: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    createdAt: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      null,
    ]),
    movie: {
      id: faker.number.int({ min: undefined, max: undefined }),
      name: faker.helpers.arrayElement([faker.word.sample(), null]),
      rating: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        null,
      ]),
    },
    nomination: {
      award: {
        title: faker.helpers.arrayElement([faker.word.sample(), null]),
        year: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
      },
      title: faker.helpers.arrayElement([faker.word.sample(), null]),
    },
    personId: faker.number.int({ min: undefined, max: undefined }),
    updatedAt: faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      null,
    ]),
    winning: faker.datatype.boolean(),
  })),
  limit: faker.number.int({ min: undefined, max: undefined }),
  page: faker.number.int({ min: undefined, max: undefined }),
  pages: faker.number.int({ min: undefined, max: undefined }),
  total: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getStudioControllerFindManyV14ResponseMock = (
  overrideResponse: Partial<StudioDocsResponseDtoV14> = {},
): StudioDocsResponseDtoV14 => ({
  docs: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
    id: faker.word.sample(),
    movies: { id: faker.number.int({ min: undefined, max: undefined }) },
    subType: faker.helpers.arrayElement([faker.word.sample(), null]),
    title: faker.helpers.arrayElement([faker.word.sample(), null]),
    type: faker.helpers.arrayElement([
      "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ",
      "–°–ø–µ—Ü—ç—Ñ—Ñ–µ–∫—Ç—ã",
      "–ü—Ä–æ–∫–∞—Ç",
      "–°—Ç—É–¥–∏—è –¥—É–±–ª—è–∂–∞",
    ] as const),
    updatedAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
  })),
  limit: faker.number.int({ min: undefined, max: undefined }),
  page: faker.number.int({ min: undefined, max: undefined }),
  pages: faker.number.int({ min: undefined, max: undefined }),
  total: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getKeywordControllerFindManyV14ResponseMock = (
  overrideResponse: Partial<KeywordDocsResponseDtoV14> = {},
): KeywordDocsResponseDtoV14 => ({
  docs: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
    id: faker.number.int({ min: undefined, max: undefined }),
    movies: { id: faker.number.int({ min: undefined, max: undefined }) },
    title: faker.helpers.arrayElement([faker.word.sample(), null]),
    updatedAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
  })),
  limit: faker.number.int({ min: undefined, max: undefined }),
  page: faker.number.int({ min: undefined, max: undefined }),
  pages: faker.number.int({ min: undefined, max: undefined }),
  total: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getImageControllerFindManyV14ResponseMock = (
  overrideResponse: Partial<ImageDocsResponseDtoV14> = {},
): ImageDocsResponseDtoV14 => ({
  docs: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
    height: faker.number.int({ min: undefined, max: undefined }),
    language: faker.word.sample(),
    movieId: faker.number.int({ min: undefined, max: undefined }),
    previewUrl: faker.word.sample(),
    type: faker.word.sample(),
    updatedAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
    url: faker.word.sample(),
    width: faker.number.int({ min: undefined, max: undefined }),
  })),
  limit: faker.number.int({ min: undefined, max: undefined }),
  page: faker.number.int({ min: undefined, max: undefined }),
  pages: faker.number.int({ min: undefined, max: undefined }),
  total: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getListControllerFindManyV14ResponseMock = (
  overrideResponse: Partial<ListDocsResponseDtoV14> = {},
): ListDocsResponseDtoV14 => ({
  docs: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    category: faker.helpers.arrayElement([faker.word.sample(), null]),
    cover: {
      previewUrl: faker.helpers.arrayElement([faker.word.sample(), null]),
      url: faker.helpers.arrayElement([faker.word.sample(), null]),
    },
    createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
    moviesCount: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      null,
    ]),
    name: faker.word.sample(),
    slug: faker.helpers.arrayElement([faker.word.sample(), null]),
    updatedAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
  })),
  limit: faker.number.int({ min: undefined, max: undefined }),
  page: faker.number.int({ min: undefined, max: undefined }),
  pages: faker.number.int({ min: undefined, max: undefined }),
  total: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getListControllerFindOneV14ResponseMock = (
  overrideResponse: Partial<List> = {},
): List => ({
  category: faker.helpers.arrayElement([faker.word.sample(), null]),
  cover: {
    previewUrl: faker.helpers.arrayElement([faker.word.sample(), null]),
    url: faker.helpers.arrayElement([faker.word.sample(), null]),
  },
  createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
  moviesCount: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    null,
  ]),
  name: faker.word.sample(),
  slug: faker.helpers.arrayElement([faker.word.sample(), null]),
  updatedAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
  ...overrideResponse,
});

export const getMovieControllerFindOneV14MockHandler = (
  overrideResponse?:
    | MovieDtoV14
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<MovieDtoV14> | MovieDtoV14),
) => {
  return http.get("*/v1.4/movie/:id", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getMovieControllerFindOneV14ResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getMovieControllerFindManyByQueryV14MockHandler = (
  overrideResponse?:
    | MovieDocsResponseDtoV14
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<MovieDocsResponseDtoV14> | MovieDocsResponseDtoV14),
) => {
  return http.get("*/v1.4/movie", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getMovieControllerFindManyByQueryV14ResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getMovieControllerSearchMovieV14MockHandler = (
  overrideResponse?:
    | SearchMovieResponseDtoV14
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<SearchMovieResponseDtoV14> | SearchMovieResponseDtoV14),
) => {
  return http.get("*/v1.4/movie/search", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getMovieControllerSearchMovieV14ResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getMovieControllerGetRandomMovieV14MockHandler = (
  overrideResponse?:
    | MovieDtoV14
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<MovieDtoV14> | MovieDtoV14),
) => {
  return http.get("*/v1.4/movie/random", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getMovieControllerGetRandomMovieV14ResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getMovieControllerFindManyAwardsV14MockHandler = (
  overrideResponse?:
    | MovieAwardDocsResponseDto
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<MovieAwardDocsResponseDto> | MovieAwardDocsResponseDto),
) => {
  return http.get("*/v1.4/movie/awards", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getMovieControllerFindManyAwardsV14ResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getMovieControllerGetPossibleValuesByFieldNameMockHandler = (
  overrideResponse?:
    | PossibleValueDto[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<PossibleValueDto[]> | PossibleValueDto[]),
) => {
  return http.get("*/v1/movie/possible-values-by-field", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getMovieControllerGetPossibleValuesByFieldNameResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getSeasonControllerFindManyV14MockHandler = (
  overrideResponse?:
    | SeasonDocsResponseDtoV14
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<SeasonDocsResponseDtoV14> | SeasonDocsResponseDtoV14),
) => {
  return http.get("*/v1.4/season", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getSeasonControllerFindManyV14ResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getReviewControllerFindManyV14MockHandler = (
  overrideResponse?:
    | ReviewDocsResponseDtoV14
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ReviewDocsResponseDtoV14> | ReviewDocsResponseDtoV14),
) => {
  return http.get("*/v1.4/review", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getReviewControllerFindManyV14ResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getPersonControllerFindOneV14MockHandler = (
  overrideResponse?:
    | Person
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<Person> | Person),
) => {
  return http.get("*/v1.4/person/:id", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPersonControllerFindOneV14ResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getPersonControllerFindManyV14MockHandler = (
  overrideResponse?:
    | PersonDocsResponseDtoV14
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<PersonDocsResponseDtoV14> | PersonDocsResponseDtoV14),
) => {
  return http.get("*/v1.4/person", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPersonControllerFindManyV14ResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getPersonControllerSearchPersonV14MockHandler = (
  overrideResponse?:
    | SearchPersonResponseDtoV14
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<SearchPersonResponseDtoV14> | SearchPersonResponseDtoV14),
) => {
  return http.get("*/v1.4/person/search", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPersonControllerSearchPersonV14ResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getPersonControllerFindManyAwardsV14MockHandler = (
  overrideResponse?:
    | PersonAwardDocsResponseDto
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<PersonAwardDocsResponseDto> | PersonAwardDocsResponseDto),
) => {
  return http.get("*/v1.4/person/awards", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPersonControllerFindManyAwardsV14ResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getStudioControllerFindManyV14MockHandler = (
  overrideResponse?:
    | StudioDocsResponseDtoV14
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<StudioDocsResponseDtoV14> | StudioDocsResponseDtoV14),
) => {
  return http.get("*/v1.4/studio", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getStudioControllerFindManyV14ResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getKeywordControllerFindManyV14MockHandler = (
  overrideResponse?:
    | KeywordDocsResponseDtoV14
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<KeywordDocsResponseDtoV14> | KeywordDocsResponseDtoV14),
) => {
  return http.get("*/v1.4/keyword", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getKeywordControllerFindManyV14ResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getImageControllerFindManyV14MockHandler = (
  overrideResponse?:
    | ImageDocsResponseDtoV14
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ImageDocsResponseDtoV14> | ImageDocsResponseDtoV14),
) => {
  return http.get("*/v1.4/image", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getImageControllerFindManyV14ResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getListControllerFindManyV14MockHandler = (
  overrideResponse?:
    | ListDocsResponseDtoV14
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ListDocsResponseDtoV14> | ListDocsResponseDtoV14),
) => {
  return http.get("*/v1.4/list", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getListControllerFindManyV14ResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getListControllerFindOneV14MockHandler = (
  overrideResponse?:
    | List
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<List> | List),
) => {
  return http.get("*/v1.4/list/:slug", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getListControllerFindOneV14ResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};
export const getAPIKinopoiskDevMock = () => [
  getMovieControllerFindOneV14MockHandler(),
  getMovieControllerFindManyByQueryV14MockHandler(),
  getMovieControllerSearchMovieV14MockHandler(),
  getMovieControllerGetRandomMovieV14MockHandler(),
  getMovieControllerFindManyAwardsV14MockHandler(),
  getMovieControllerGetPossibleValuesByFieldNameMockHandler(),
  getSeasonControllerFindManyV14MockHandler(),
  getReviewControllerFindManyV14MockHandler(),
  getPersonControllerFindOneV14MockHandler(),
  getPersonControllerFindManyV14MockHandler(),
  getPersonControllerSearchPersonV14MockHandler(),
  getPersonControllerFindManyAwardsV14MockHandler(),
  getStudioControllerFindManyV14MockHandler(),
  getKeywordControllerFindManyV14MockHandler(),
  getImageControllerFindManyV14MockHandler(),
  getListControllerFindManyV14MockHandler(),
  getListControllerFindOneV14MockHandler(),
];
