/**
 * Generated by orval v6.28.2 üç∫
 * Do not edit manually.
 * –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è –Ω–µ–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ API –∫–∏–Ω–æ–ø–æ–∏—Å–∫–∞ (kinopoisk.dev).
 * 
<!-- Yandex.Metrika counter -->
<div><img src="https://mc.yandex.ru/watch/62307766" style="position:absolute; left:-9999px;" alt="" /></div>
<!-- /Yandex.Metrika counter -->
<p>–ß–µ—Ä–µ–∑ —ç—Ç–æ—Ç API –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∏–Ω–æ–ø–æ–∏—Å–∫–∞. –ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–∑—É—á–∏–≤ —ç—Ç—É –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é.</p>
<h2>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π?</h2>
<p>
–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å API –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –≤ –±–æ—Ç–µ <a href="https://t.me/kinopoiskdev_bot">@kinopoiskdev_bot</a>. <br />
–ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <strong>Authorize</strong> –∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ –ø–æ–ª–µ <strong>Value</strong>.<br />
–ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã –∫ API, –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <strong>Try it out</strong> –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –Ω—É–∂–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞.<br />
–ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <strong>Execute</strong> –∏ –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç –æ—Ç API –∏ –ø—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞.
</p>
<h3>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å API?</h3>
<p>
API —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É REST, –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –Ω–∞ –∞–¥—Ä–µ—Å <code>https://api.kinopoisk.dev/</code> —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤–µ—Ä—Å–∏–∏ API –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞.<br />
–í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∫ API –∫–∏–Ω–æ–ø–æ–∏—Å–∫–∞ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ <code>X-API-KEY</code> —Å –≤–∞—à–∏–º —Ç–æ–∫–µ–Ω–æ–º. –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—à–∏–±–∫—É <code>401</code>.<br />
–ü—Ä–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ —É—á–∏—Ç—ã–≤–∞–π—Ç–µ, —á—Ç–æ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ <code>query</code> –∏ <code>path</code>. –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–µ—Ç–æ–¥–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ.
–ù–∞–ø—Ä–∏–º–µ—Ä, –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –∑–∞ 2023 –≥–æ–¥ –≤ –∂–∞–Ω—Ä–µ <code>–∫—Ä–∏–º–∏–Ω–∞–ª</code>, —Ç–æ–≥–¥–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫: <code>https://api.kinopoisk.dev/v1.4/movie?year=2023&genres.name=–∫—Ä–∏–º–∏–Ω–∞–ª</code>.
–ò–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –≤—ã—à–µ 8, —Ç–æ–≥–¥–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫: <code>https://api.kinopoisk.dev/v1.4/movie?rating.imdb=8-10</code>.
–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è kinopoisk api –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –≤–∞–º —Å–æ—Å—Ç–∞–≤–∏—Ç—å –Ω—É–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –µ–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–º.
</p>
<h3>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Å–∏–Ω—Ç–µ–∫—Å–∞ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</h3>
<p>
–ö–ª—é—á–∏ –≤ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –∏–º–µ—é—Ç —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∑–Ω–∞—á–µ–Ω–∏–π. –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–Ω–∞—á–µ–Ω–∏—è, –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞, —Å–µ—Ä–∏–∞–ª–∞ –∏ —Ç.–¥. –≤ –±–∞–∑–µ. <br />
–ü–æ–ª—è —Å —Ç–∏–ø–æ–º <code>Number</code> –º–æ–≥—É—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–∞—Ö: <code>rating.kp=1-10</code>, <code>rating.kp=1</code>, <code>year=2022&year=2023</code>. <br />
–ü–æ–ª—è —Å —Ç–∏–ø–æ–º <code>Date</code> –º–æ–≥—É—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–∞—Ö: <code>premiere.russia=dd.mm.yyyy-dd.mm.yyyy</code>, <code>premiere.russia=dd.mm.yyyy</code>. <br />
–ü–æ–ª—è —Å —Ç–∏–ø–æ–º <code>String</code> –º–æ–≥—É—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–∞—Ö: <code>genres.name=–¥—Ä–∞–º–∞</code>, <code>genres.name=–∫—Ä–∏–º–∏–Ω–∞–ª</code>, <code>genres.name=–∫—Ä–∏–º–∏–Ω–∞–ª&genres.name=–¥—Ä–∞–º–∞</code> <br/>
–ü–æ–ª—è —Å —Ç–∏–ø–æ–º <code>Boolean</code> –º–æ–≥—É—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–∞—Ö: <code>isSeries=true</code>, <code>isSeries=false</code>. <br />
–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∂–∞–Ω—Ä–æ–≤ –∏ —Å—Ç—Ä–∞–Ω –º–æ–≥—É—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã <code>+</code> –∏ <code>!</code>, –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –≤–∫–ª—é—á–∞–µ–º—ã—Ö –∏ –∏—Å–∫–ª—é—á–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π. –ù–∞–ø—Ä–∏–º–µ—Ä, –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –≤ –∂–∞–Ω—Ä–∞—Ö <code>–¥—Ä–∞–º–∞</code> –∏ <code>–∫—Ä–∏–º–∏–Ω–∞–ª</code>, —Ç–æ–≥–¥–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫: <code>genres.name=+–¥—Ä–∞–º–∞&genres.name=+–∫—Ä–∏–º–∏–Ω–∞–ª</code>. –ò–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ —Å –∂–∞–Ω—Ä–æ–º <code>–¥—Ä–∞–º–∞</code> –∏ –±–µ–∑ –∂–∞–Ω—Ä–∞ <code>–∫—Ä–∏–º–∏–Ω–∞–ª</code>, —Ç–æ–≥–¥–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫: <code>genres.name=+–¥—Ä–∞–º–∞&genres.name=!–∫—Ä–∏–º–∏–Ω–∞–ª</code>. <br />
</p>
<p>
–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤:
<ul>
  <li><code>!</code> - –∏—Å–∫–ª—é—á–∏—Ç—å. –≠—Ç–æ—Ç —Å–∏–º–≤–æ–ª –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º–µ <code>%21</code></li>
  <li><code>+</code> - –≤–∫–ª—é—á–∏—Ç—å. –≠—Ç–æ—Ç —Å–∏–º–≤–æ–ª –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º–µ <code>%2B</code></li>
  <li><code>-</code> - –¥–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è.</li>
</ul>
</p>

<p>–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ä–∞–±–æ—Ç—ã —Å API –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ —á–∞—Ç <a href="https://t.me/+jeHPZVXiLPFhODJi">Developer Community KinopoiskDev</a>.</p>

<p>–ï—Å–ª–∏ –≤—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –æ—à–∏–±–∫—É –∏–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é, —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ issue –Ω–∞ <a href="https://github.com/mdwitr0/kinopoiskdev">GitHub</a>.</p>

<h3>–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:</h3>
<ul>
  <li><a href="https://kinopoiskdev.readme.io">–ë–æ–ª–µ–µ —É–¥–æ–±–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è</a></li>
  <li><a href="https://github.com/OpenMovieDB/kinopoiskdev_client">JavaScript –∏ TypeScript –∫–ª–∏–µ–Ω—Ç (–£—Å—Ç–∞—Ä–µ–ª, –∂–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)</a></li>
  <li><a href="https://github.com/odi1n/kinopoisk_dev">Python –∫–ª–∏–µ–Ω—Ç (–£—Å—Ç–∞—Ä–µ–ª, –∂–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)</a></li>
  <li><a href="/documentation-json">OpenAPI Specification (JSON)</a></li>
  <li><a href="/documentation-yaml">OpenAPI Specification (YAML)</a></li>
</ul>

 * OpenAPI spec version: 1.4
 */
import { faker } from "@faker-js/faker";
import { HttpResponse, delay, http } from "msw";
import type {
  ImageDocsResponseDtoV14,
  KeywordDocsResponseDtoV14,
  List,
  ListDocsResponseDtoV14,
  MovieAwardDocsResponseDto,
  MovieDocsResponseDtoV14,
  MovieDtoV14,
  Person,
  PersonAwardDocsResponseDto,
  PersonDocsResponseDtoV14,
  PossibleValueDto,
  ReviewDocsResponseDtoV14,
  SearchMovieResponseDtoV14,
  SearchPersonResponseDtoV14,
  SeasonDocsResponseDtoV14,
  StudioDocsResponseDtoV14,
} from "./index.schemas";

export const getMovieControllerFindOneV14ResponseMock = (
  overrideResponse: any = {},
): MovieDtoV14 => ({
  ageRating: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      null,
    ]),
    undefined,
  ]),
  alternativeName: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.word.sample(), null]),
    undefined,
  ]),
  audience: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      count: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
      country: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  backdrop: faker.helpers.arrayElement([
    {
      previewUrl: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      url: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  budget: faker.helpers.arrayElement([
    {
      currency: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      value: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  countries: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  createdAt: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      null,
    ]),
    undefined,
  ]),
  description: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.word.sample(), null]),
    undefined,
  ]),
  enName: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.word.sample(), null]),
    undefined,
  ]),
  externalId: faker.helpers.arrayElement([
    {
      imdb: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      kpHD: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      tmdb: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  facts: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      spoiler: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      type: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      value: faker.word.sample(),
      ...overrideResponse,
    })),
    undefined,
  ]),
  fees: faker.helpers.arrayElement([
    {
      russia: faker.helpers.arrayElement([
        {
          currency: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
          ]),
          value: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              null,
            ]),
            undefined,
          ]),
          ...overrideResponse,
        },
        undefined,
      ]),
      usa: faker.helpers.arrayElement([
        {
          currency: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
          ]),
          value: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              null,
            ]),
            undefined,
          ]),
          ...overrideResponse,
        },
        undefined,
      ]),
      world: faker.helpers.arrayElement([
        {
          currency: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
          ]),
          value: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              null,
            ]),
            undefined,
          ]),
          ...overrideResponse,
        },
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  genres: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  id: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      null,
    ]),
    undefined,
  ]),
  isSeries: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  lists: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.word.sample()),
    undefined,
  ]),
  logo: faker.helpers.arrayElement([
    {
      url: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  movieLength: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      null,
    ]),
    undefined,
  ]),
  name: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.word.sample(), null]),
    undefined,
  ]),
  names: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      language: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      type: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  networks: faker.helpers.arrayElement([
    {
      items: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          logo: faker.helpers.arrayElement([
            {
              url: faker.helpers.arrayElement([
                faker.helpers.arrayElement([faker.word.sample(), null]),
                undefined,
              ]),
              ...overrideResponse,
            },
            undefined,
          ]),
          name: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
          ]),
          ...overrideResponse,
        })),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  persons: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      description: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      enName: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      enProfession: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      id: faker.number.int({ min: undefined, max: undefined }),
      name: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      photo: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      profession: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  poster: faker.helpers.arrayElement([
    {
      previewUrl: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      url: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  premiere: faker.helpers.arrayElement([
    {
      bluray: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      cinema: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          `${faker.date.past().toISOString().split(".")[0]}Z`,
          null,
        ]),
        undefined,
      ]),
      country: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      digital: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      dvd: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      russia: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          `${faker.date.past().toISOString().split(".")[0]}Z`,
          null,
        ]),
        undefined,
      ]),
      world: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          `${faker.date.past().toISOString().split(".")[0]}Z`,
          null,
        ]),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  rating: faker.helpers.arrayElement([
    {
      await: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
      filmCritics: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
      imdb: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
      kp: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
      russianFilmCritics: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
      tmdb: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  ratingMpaa: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.word.sample(), null]),
    undefined,
  ]),
  releaseYears: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      end: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
      start: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  reviewInfo: faker.helpers.arrayElement([
    {
      count: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
      percentage: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      positiveCount: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  seasonsInfo: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      episodesCount: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
      number: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  sequelsAndPrequels: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      alternativeName: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      enName: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      id: faker.number.int({ min: undefined, max: undefined }),
      name: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      poster: faker.helpers.arrayElement([
        {
          previewUrl: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
          ]),
          url: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
          ]),
          ...overrideResponse,
        },
        undefined,
      ]),
      rating: faker.helpers.arrayElement([
        {
          await: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              null,
            ]),
            undefined,
          ]),
          filmCritics: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              null,
            ]),
            undefined,
          ]),
          imdb: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              null,
            ]),
            undefined,
          ]),
          kp: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              null,
            ]),
            undefined,
          ]),
          russianFilmCritics: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              null,
            ]),
            undefined,
          ]),
          tmdb: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              null,
            ]),
            undefined,
          ]),
          ...overrideResponse,
        },
        undefined,
      ]),
      type: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      year: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  seriesLength: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      null,
    ]),
    undefined,
  ]),
  shortDescription: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.word.sample(), null]),
    undefined,
  ]),
  similarMovies: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      alternativeName: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      enName: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      id: faker.number.int({ min: undefined, max: undefined }),
      name: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      poster: faker.helpers.arrayElement([
        {
          previewUrl: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
          ]),
          url: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
          ]),
          ...overrideResponse,
        },
        undefined,
      ]),
      rating: faker.helpers.arrayElement([
        {
          await: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              null,
            ]),
            undefined,
          ]),
          filmCritics: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              null,
            ]),
            undefined,
          ]),
          imdb: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              null,
            ]),
            undefined,
          ]),
          kp: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              null,
            ]),
            undefined,
          ]),
          russianFilmCritics: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              null,
            ]),
            undefined,
          ]),
          tmdb: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              null,
            ]),
            undefined,
          ]),
          ...overrideResponse,
        },
        undefined,
      ]),
      type: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      year: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  slogan: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.word.sample(), null]),
    undefined,
  ]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.word.sample(), null]),
    undefined,
  ]),
  ticketsOnSale: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  top10: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      null,
    ]),
    undefined,
  ]),
  top250: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      null,
    ]),
    undefined,
  ]),
  totalSeriesLength: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      null,
    ]),
    undefined,
  ]),
  type: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.word.sample(), null]),
    undefined,
  ]),
  typeNumber: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      null,
    ]),
    undefined,
  ]),
  updatedAt: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      null,
    ]),
    undefined,
  ]),
  videos: faker.helpers.arrayElement([
    {
      trailers: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          name: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
          ]),
          site: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
          ]),
          size: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              null,
            ]),
            undefined,
          ]),
          type: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
          ]),
          url: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
          ]),
          ...overrideResponse,
        })),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  votes: faker.helpers.arrayElement([
    {
      await: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
      filmCritics: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
      imdb: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
      kp: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      russianFilmCritics: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
      tmdb: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  watchability: faker.helpers.arrayElement([
    {
      items: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          logo: {
            url: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.word.sample(), null]),
              undefined,
            ]),
            ...overrideResponse,
          },
          name: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
          ]),
          url: faker.word.sample(),
          ...overrideResponse,
        })),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  year: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      null,
    ]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getMovieControllerFindManyByQueryV14ResponseMock = (
  overrideResponse: any = {},
): MovieDocsResponseDtoV14 => ({
  docs: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    ageRating: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        null,
      ]),
      undefined,
    ]),
    alternativeName: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.word.sample(), null]),
      undefined,
    ]),
    audience: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        count: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        country: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.word.sample(), null]),
          undefined,
        ]),
        ...overrideResponse,
      })),
      undefined,
    ]),
    backdrop: faker.helpers.arrayElement([
      {
        previewUrl: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.word.sample(), null]),
          undefined,
        ]),
        url: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.word.sample(), null]),
          undefined,
        ]),
        ...overrideResponse,
      },
      undefined,
    ]),
    budget: faker.helpers.arrayElement([
      {
        currency: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.word.sample(), null]),
          undefined,
        ]),
        value: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        ...overrideResponse,
      },
      undefined,
    ]),
    countries: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        ...overrideResponse,
      })),
      undefined,
    ]),
    createdAt: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        null,
      ]),
      undefined,
    ]),
    description: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.word.sample(), null]),
      undefined,
    ]),
    enName: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.word.sample(), null]),
      undefined,
    ]),
    externalId: faker.helpers.arrayElement([
      {
        imdb: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.word.sample(), null]),
          undefined,
        ]),
        kpHD: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.word.sample(), null]),
          undefined,
        ]),
        tmdb: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        ...overrideResponse,
      },
      undefined,
    ]),
    facts: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        spoiler: faker.helpers.arrayElement([
          faker.datatype.boolean(),
          undefined,
        ]),
        type: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.word.sample(), null]),
          undefined,
        ]),
        value: faker.word.sample(),
        ...overrideResponse,
      })),
      undefined,
    ]),
    fees: faker.helpers.arrayElement([
      {
        russia: faker.helpers.arrayElement([
          {
            currency: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.word.sample(), null]),
              undefined,
            ]),
            value: faker.helpers.arrayElement([
              faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                null,
              ]),
              undefined,
            ]),
            ...overrideResponse,
          },
          undefined,
        ]),
        usa: faker.helpers.arrayElement([
          {
            currency: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.word.sample(), null]),
              undefined,
            ]),
            value: faker.helpers.arrayElement([
              faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                null,
              ]),
              undefined,
            ]),
            ...overrideResponse,
          },
          undefined,
        ]),
        world: faker.helpers.arrayElement([
          {
            currency: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.word.sample(), null]),
              undefined,
            ]),
            value: faker.helpers.arrayElement([
              faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                null,
              ]),
              undefined,
            ]),
            ...overrideResponse,
          },
          undefined,
        ]),
        ...overrideResponse,
      },
      undefined,
    ]),
    genres: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        ...overrideResponse,
      })),
      undefined,
    ]),
    id: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        null,
      ]),
      undefined,
    ]),
    isSeries: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
    lists: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => faker.word.sample()),
      undefined,
    ]),
    logo: faker.helpers.arrayElement([
      {
        url: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.word.sample(), null]),
          undefined,
        ]),
        ...overrideResponse,
      },
      undefined,
    ]),
    movieLength: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        null,
      ]),
      undefined,
    ]),
    name: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.word.sample(), null]),
      undefined,
    ]),
    names: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        language: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.word.sample(), null]),
          undefined,
        ]),
        name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        type: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.word.sample(), null]),
          undefined,
        ]),
        ...overrideResponse,
      })),
      undefined,
    ]),
    networks: faker.helpers.arrayElement([
      {
        items: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => ({
            logo: faker.helpers.arrayElement([
              {
                url: faker.helpers.arrayElement([
                  faker.helpers.arrayElement([faker.word.sample(), null]),
                  undefined,
                ]),
                ...overrideResponse,
              },
              undefined,
            ]),
            name: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.word.sample(), null]),
              undefined,
            ]),
            ...overrideResponse,
          })),
          undefined,
        ]),
        ...overrideResponse,
      },
      undefined,
    ]),
    persons: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        description: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.word.sample(), null]),
          undefined,
        ]),
        enName: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.word.sample(), null]),
          undefined,
        ]),
        enProfession: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.word.sample(), null]),
          undefined,
        ]),
        id: faker.number.int({ min: undefined, max: undefined }),
        name: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.word.sample(), null]),
          undefined,
        ]),
        photo: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.word.sample(), null]),
          undefined,
        ]),
        profession: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.word.sample(), null]),
          undefined,
        ]),
        ...overrideResponse,
      })),
      undefined,
    ]),
    poster: faker.helpers.arrayElement([
      {
        previewUrl: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.word.sample(), null]),
          undefined,
        ]),
        url: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.word.sample(), null]),
          undefined,
        ]),
        ...overrideResponse,
      },
      undefined,
    ]),
    premiere: faker.helpers.arrayElement([
      {
        bluray: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.word.sample(), null]),
          undefined,
        ]),
        cinema: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split(".")[0]}Z`,
            null,
          ]),
          undefined,
        ]),
        country: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.word.sample(), null]),
          undefined,
        ]),
        digital: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.word.sample(), null]),
          undefined,
        ]),
        dvd: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.word.sample(), null]),
          undefined,
        ]),
        russia: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split(".")[0]}Z`,
            null,
          ]),
          undefined,
        ]),
        world: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            `${faker.date.past().toISOString().split(".")[0]}Z`,
            null,
          ]),
          undefined,
        ]),
        ...overrideResponse,
      },
      undefined,
    ]),
    rating: faker.helpers.arrayElement([
      {
        await: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        filmCritics: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        imdb: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        kp: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        russianFilmCritics: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        tmdb: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        ...overrideResponse,
      },
      undefined,
    ]),
    ratingMpaa: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.word.sample(), null]),
      undefined,
    ]),
    releaseYears: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        end: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        start: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        ...overrideResponse,
      })),
      undefined,
    ]),
    reviewInfo: faker.helpers.arrayElement([
      {
        count: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        percentage: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.word.sample(), null]),
          undefined,
        ]),
        positiveCount: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        ...overrideResponse,
      },
      undefined,
    ]),
    seasonsInfo: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        episodesCount: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        number: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        ...overrideResponse,
      })),
      undefined,
    ]),
    sequelsAndPrequels: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        alternativeName: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.word.sample(), null]),
          undefined,
        ]),
        enName: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.word.sample(), null]),
          undefined,
        ]),
        id: faker.number.int({ min: undefined, max: undefined }),
        name: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.word.sample(), null]),
          undefined,
        ]),
        poster: faker.helpers.arrayElement([
          {
            previewUrl: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.word.sample(), null]),
              undefined,
            ]),
            url: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.word.sample(), null]),
              undefined,
            ]),
            ...overrideResponse,
          },
          undefined,
        ]),
        rating: faker.helpers.arrayElement([
          {
            await: faker.helpers.arrayElement([
              faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                null,
              ]),
              undefined,
            ]),
            filmCritics: faker.helpers.arrayElement([
              faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                null,
              ]),
              undefined,
            ]),
            imdb: faker.helpers.arrayElement([
              faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                null,
              ]),
              undefined,
            ]),
            kp: faker.helpers.arrayElement([
              faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                null,
              ]),
              undefined,
            ]),
            russianFilmCritics: faker.helpers.arrayElement([
              faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                null,
              ]),
              undefined,
            ]),
            tmdb: faker.helpers.arrayElement([
              faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                null,
              ]),
              undefined,
            ]),
            ...overrideResponse,
          },
          undefined,
        ]),
        type: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.word.sample(), null]),
          undefined,
        ]),
        year: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        ...overrideResponse,
      })),
      undefined,
    ]),
    seriesLength: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        null,
      ]),
      undefined,
    ]),
    shortDescription: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.word.sample(), null]),
      undefined,
    ]),
    similarMovies: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        alternativeName: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.word.sample(), null]),
          undefined,
        ]),
        enName: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.word.sample(), null]),
          undefined,
        ]),
        id: faker.number.int({ min: undefined, max: undefined }),
        name: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.word.sample(), null]),
          undefined,
        ]),
        poster: faker.helpers.arrayElement([
          {
            previewUrl: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.word.sample(), null]),
              undefined,
            ]),
            url: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.word.sample(), null]),
              undefined,
            ]),
            ...overrideResponse,
          },
          undefined,
        ]),
        rating: faker.helpers.arrayElement([
          {
            await: faker.helpers.arrayElement([
              faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                null,
              ]),
              undefined,
            ]),
            filmCritics: faker.helpers.arrayElement([
              faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                null,
              ]),
              undefined,
            ]),
            imdb: faker.helpers.arrayElement([
              faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                null,
              ]),
              undefined,
            ]),
            kp: faker.helpers.arrayElement([
              faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                null,
              ]),
              undefined,
            ]),
            russianFilmCritics: faker.helpers.arrayElement([
              faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                null,
              ]),
              undefined,
            ]),
            tmdb: faker.helpers.arrayElement([
              faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                null,
              ]),
              undefined,
            ]),
            ...overrideResponse,
          },
          undefined,
        ]),
        type: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.word.sample(), null]),
          undefined,
        ]),
        year: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        ...overrideResponse,
      })),
      undefined,
    ]),
    slogan: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.word.sample(), null]),
      undefined,
    ]),
    status: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.word.sample(), null]),
      undefined,
    ]),
    ticketsOnSale: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    top10: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        null,
      ]),
      undefined,
    ]),
    top250: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        null,
      ]),
      undefined,
    ]),
    totalSeriesLength: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        null,
      ]),
      undefined,
    ]),
    type: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.word.sample(), null]),
      undefined,
    ]),
    typeNumber: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        null,
      ]),
      undefined,
    ]),
    updatedAt: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        null,
      ]),
      undefined,
    ]),
    videos: faker.helpers.arrayElement([
      {
        trailers: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => ({
            name: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.word.sample(), null]),
              undefined,
            ]),
            site: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.word.sample(), null]),
              undefined,
            ]),
            size: faker.helpers.arrayElement([
              faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                null,
              ]),
              undefined,
            ]),
            type: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.word.sample(), null]),
              undefined,
            ]),
            url: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.word.sample(), null]),
              undefined,
            ]),
            ...overrideResponse,
          })),
          undefined,
        ]),
        ...overrideResponse,
      },
      undefined,
    ]),
    votes: faker.helpers.arrayElement([
      {
        await: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        filmCritics: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        imdb: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        kp: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.word.sample(), null]),
          undefined,
        ]),
        russianFilmCritics: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        tmdb: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        ...overrideResponse,
      },
      undefined,
    ]),
    watchability: faker.helpers.arrayElement([
      {
        items: faker.helpers.arrayElement([
          Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
          ).map(() => ({
            logo: {
              url: faker.helpers.arrayElement([
                faker.helpers.arrayElement([faker.word.sample(), null]),
                undefined,
              ]),
              ...overrideResponse,
            },
            name: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.word.sample(), null]),
              undefined,
            ]),
            url: faker.word.sample(),
            ...overrideResponse,
          })),
          undefined,
        ]),
        ...overrideResponse,
      },
      undefined,
    ]),
    year: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        null,
      ]),
      undefined,
    ]),
    ...overrideResponse,
  })),
  limit: faker.number.int({ min: undefined, max: undefined }),
  page: faker.number.int({ min: undefined, max: undefined }),
  pages: faker.number.int({ min: undefined, max: undefined }),
  total: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getMovieControllerSearchMovieV14ResponseMock = (
  overrideResponse: any = {},
): SearchMovieResponseDtoV14 => ({
  docs: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    ageRating: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        null,
      ]),
      undefined,
    ]),
    alternativeName: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.word.sample(), null]),
      undefined,
    ]),
    backdrop: faker.helpers.arrayElement([
      {
        previewUrl: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.word.sample(), null]),
          undefined,
        ]),
        url: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.word.sample(), null]),
          undefined,
        ]),
        ...overrideResponse,
      },
      undefined,
    ]),
    countries: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        ...overrideResponse,
      })),
      undefined,
    ]),
    description: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.word.sample(), null]),
      undefined,
    ]),
    enName: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.word.sample(), null]),
      undefined,
    ]),
    externalId: faker.helpers.arrayElement([
      {
        imdb: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.word.sample(), null]),
          undefined,
        ]),
        kpHD: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.word.sample(), null]),
          undefined,
        ]),
        tmdb: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        ...overrideResponse,
      },
      undefined,
    ]),
    genres: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        ...overrideResponse,
      })),
      undefined,
    ]),
    id: faker.number.int({ min: undefined, max: undefined }),
    isSeries: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
    logo: faker.helpers.arrayElement([
      {
        url: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.word.sample(), null]),
          undefined,
        ]),
        ...overrideResponse,
      },
      undefined,
    ]),
    movieLength: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        null,
      ]),
      undefined,
    ]),
    name: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.word.sample(), null]),
      undefined,
    ]),
    names: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        language: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.word.sample(), null]),
          undefined,
        ]),
        name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        type: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.word.sample(), null]),
          undefined,
        ]),
        ...overrideResponse,
      })),
      undefined,
    ]),
    poster: faker.helpers.arrayElement([
      {
        previewUrl: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.word.sample(), null]),
          undefined,
        ]),
        url: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.word.sample(), null]),
          undefined,
        ]),
        ...overrideResponse,
      },
      undefined,
    ]),
    rating: faker.helpers.arrayElement([
      {
        await: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        filmCritics: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        imdb: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        kp: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        russianFilmCritics: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        tmdb: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        ...overrideResponse,
      },
      undefined,
    ]),
    ratingMpaa: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.word.sample(), null]),
      undefined,
    ]),
    releaseYears: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        end: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        start: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        ...overrideResponse,
      })),
      undefined,
    ]),
    seriesLength: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        null,
      ]),
      undefined,
    ]),
    shortDescription: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.word.sample(), null]),
      undefined,
    ]),
    status: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.word.sample(), null]),
      undefined,
    ]),
    ticketsOnSale: faker.helpers.arrayElement([
      faker.datatype.boolean(),
      undefined,
    ]),
    top10: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        null,
      ]),
      undefined,
    ]),
    top250: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        null,
      ]),
      undefined,
    ]),
    totalSeriesLength: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        null,
      ]),
      undefined,
    ]),
    type: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.word.sample(), null]),
      undefined,
    ]),
    typeNumber: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        null,
      ]),
      undefined,
    ]),
    votes: faker.helpers.arrayElement([
      {
        await: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        filmCritics: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        imdb: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        kp: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.word.sample(), null]),
          undefined,
        ]),
        russianFilmCritics: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        tmdb: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        ...overrideResponse,
      },
      undefined,
    ]),
    year: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        null,
      ]),
      undefined,
    ]),
    ...overrideResponse,
  })),
  limit: faker.number.int({ min: undefined, max: undefined }),
  page: faker.number.int({ min: undefined, max: undefined }),
  pages: faker.number.int({ min: undefined, max: undefined }),
  total: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getMovieControllerGetRandomMovieV14ResponseMock = (
  overrideResponse: any = {},
): MovieDtoV14 => ({
  ageRating: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      null,
    ]),
    undefined,
  ]),
  alternativeName: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.word.sample(), null]),
    undefined,
  ]),
  audience: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      count: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
      country: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  backdrop: faker.helpers.arrayElement([
    {
      previewUrl: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      url: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  budget: faker.helpers.arrayElement([
    {
      currency: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      value: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  countries: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  createdAt: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      null,
    ]),
    undefined,
  ]),
  description: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.word.sample(), null]),
    undefined,
  ]),
  enName: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.word.sample(), null]),
    undefined,
  ]),
  externalId: faker.helpers.arrayElement([
    {
      imdb: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      kpHD: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      tmdb: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  facts: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      spoiler: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      type: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      value: faker.word.sample(),
      ...overrideResponse,
    })),
    undefined,
  ]),
  fees: faker.helpers.arrayElement([
    {
      russia: faker.helpers.arrayElement([
        {
          currency: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
          ]),
          value: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              null,
            ]),
            undefined,
          ]),
          ...overrideResponse,
        },
        undefined,
      ]),
      usa: faker.helpers.arrayElement([
        {
          currency: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
          ]),
          value: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              null,
            ]),
            undefined,
          ]),
          ...overrideResponse,
        },
        undefined,
      ]),
      world: faker.helpers.arrayElement([
        {
          currency: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
          ]),
          value: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              null,
            ]),
            undefined,
          ]),
          ...overrideResponse,
        },
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  genres: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  id: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      null,
    ]),
    undefined,
  ]),
  isSeries: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
  lists: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.word.sample()),
    undefined,
  ]),
  logo: faker.helpers.arrayElement([
    {
      url: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  movieLength: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      null,
    ]),
    undefined,
  ]),
  name: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.word.sample(), null]),
    undefined,
  ]),
  names: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      language: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      type: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  networks: faker.helpers.arrayElement([
    {
      items: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          logo: faker.helpers.arrayElement([
            {
              url: faker.helpers.arrayElement([
                faker.helpers.arrayElement([faker.word.sample(), null]),
                undefined,
              ]),
              ...overrideResponse,
            },
            undefined,
          ]),
          name: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
          ]),
          ...overrideResponse,
        })),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  persons: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      description: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      enName: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      enProfession: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      id: faker.number.int({ min: undefined, max: undefined }),
      name: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      photo: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      profession: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  poster: faker.helpers.arrayElement([
    {
      previewUrl: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      url: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  premiere: faker.helpers.arrayElement([
    {
      bluray: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      cinema: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          `${faker.date.past().toISOString().split(".")[0]}Z`,
          null,
        ]),
        undefined,
      ]),
      country: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      digital: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      dvd: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      russia: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          `${faker.date.past().toISOString().split(".")[0]}Z`,
          null,
        ]),
        undefined,
      ]),
      world: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          `${faker.date.past().toISOString().split(".")[0]}Z`,
          null,
        ]),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  rating: faker.helpers.arrayElement([
    {
      await: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
      filmCritics: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
      imdb: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
      kp: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
      russianFilmCritics: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
      tmdb: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  ratingMpaa: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.word.sample(), null]),
    undefined,
  ]),
  releaseYears: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      end: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
      start: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  reviewInfo: faker.helpers.arrayElement([
    {
      count: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
      percentage: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      positiveCount: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  seasonsInfo: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      episodesCount: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
      number: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  sequelsAndPrequels: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      alternativeName: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      enName: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      id: faker.number.int({ min: undefined, max: undefined }),
      name: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      poster: faker.helpers.arrayElement([
        {
          previewUrl: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
          ]),
          url: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
          ]),
          ...overrideResponse,
        },
        undefined,
      ]),
      rating: faker.helpers.arrayElement([
        {
          await: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              null,
            ]),
            undefined,
          ]),
          filmCritics: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              null,
            ]),
            undefined,
          ]),
          imdb: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              null,
            ]),
            undefined,
          ]),
          kp: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              null,
            ]),
            undefined,
          ]),
          russianFilmCritics: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              null,
            ]),
            undefined,
          ]),
          tmdb: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              null,
            ]),
            undefined,
          ]),
          ...overrideResponse,
        },
        undefined,
      ]),
      type: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      year: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  seriesLength: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      null,
    ]),
    undefined,
  ]),
  shortDescription: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.word.sample(), null]),
    undefined,
  ]),
  similarMovies: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      alternativeName: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      enName: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      id: faker.number.int({ min: undefined, max: undefined }),
      name: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      poster: faker.helpers.arrayElement([
        {
          previewUrl: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
          ]),
          url: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
          ]),
          ...overrideResponse,
        },
        undefined,
      ]),
      rating: faker.helpers.arrayElement([
        {
          await: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              null,
            ]),
            undefined,
          ]),
          filmCritics: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              null,
            ]),
            undefined,
          ]),
          imdb: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              null,
            ]),
            undefined,
          ]),
          kp: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              null,
            ]),
            undefined,
          ]),
          russianFilmCritics: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              null,
            ]),
            undefined,
          ]),
          tmdb: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              null,
            ]),
            undefined,
          ]),
          ...overrideResponse,
        },
        undefined,
      ]),
      type: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      year: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  slogan: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.word.sample(), null]),
    undefined,
  ]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.word.sample(), null]),
    undefined,
  ]),
  ticketsOnSale: faker.helpers.arrayElement([
    faker.datatype.boolean(),
    undefined,
  ]),
  top10: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      null,
    ]),
    undefined,
  ]),
  top250: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      null,
    ]),
    undefined,
  ]),
  totalSeriesLength: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      null,
    ]),
    undefined,
  ]),
  type: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.word.sample(), null]),
    undefined,
  ]),
  typeNumber: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      null,
    ]),
    undefined,
  ]),
  updatedAt: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      `${faker.date.past().toISOString().split(".")[0]}Z`,
      null,
    ]),
    undefined,
  ]),
  videos: faker.helpers.arrayElement([
    {
      trailers: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          name: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
          ]),
          site: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
          ]),
          size: faker.helpers.arrayElement([
            faker.helpers.arrayElement([
              faker.number.int({ min: undefined, max: undefined }),
              null,
            ]),
            undefined,
          ]),
          type: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
          ]),
          url: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
          ]),
          ...overrideResponse,
        })),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  votes: faker.helpers.arrayElement([
    {
      await: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
      filmCritics: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
      imdb: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
      kp: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      russianFilmCritics: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
      tmdb: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  watchability: faker.helpers.arrayElement([
    {
      items: faker.helpers.arrayElement([
        Array.from(
          { length: faker.number.int({ min: 1, max: 10 }) },
          (_, i) => i + 1,
        ).map(() => ({
          logo: {
            url: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.word.sample(), null]),
              undefined,
            ]),
            ...overrideResponse,
          },
          name: faker.helpers.arrayElement([
            faker.helpers.arrayElement([faker.word.sample(), null]),
            undefined,
          ]),
          url: faker.word.sample(),
          ...overrideResponse,
        })),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  year: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      null,
    ]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getMovieControllerFindManyAwardsV14ResponseMock = (
  overrideResponse: any = {},
): MovieAwardDocsResponseDto => ({
  docs: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    createdAt: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        null,
      ]),
      undefined,
    ]),
    movieId: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        null,
      ]),
      undefined,
    ]),
    nomination: faker.helpers.arrayElement([
      {
        award: faker.helpers.arrayElement([
          {
            title: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.word.sample(), null]),
              undefined,
            ]),
            year: faker.helpers.arrayElement([
              faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                null,
              ]),
              undefined,
            ]),
            ...overrideResponse,
          },
          undefined,
        ]),
        title: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.word.sample(), null]),
          undefined,
        ]),
        ...overrideResponse,
      },
      undefined,
    ]),
    updatedAt: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        null,
      ]),
      undefined,
    ]),
    winning: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
    ...overrideResponse,
  })),
  limit: faker.number.int({ min: undefined, max: undefined }),
  page: faker.number.int({ min: undefined, max: undefined }),
  pages: faker.number.int({ min: undefined, max: undefined }),
  total: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getMovieControllerGetPossibleValuesByFieldNameResponseMock = (
  overrideResponse: any = {},
): PossibleValueDto[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    name: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.word.sample(), null]),
      undefined,
    ]),
    slug: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.word.sample(), null]),
      undefined,
    ]),
    ...overrideResponse,
  }));

export const getSeasonControllerFindManyV14ResponseMock = (
  overrideResponse: any = {},
): SeasonDocsResponseDtoV14 => ({
  docs: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    airDate: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    createdAt: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        null,
      ]),
      undefined,
    ]),
    description: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    duration: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    enDescription: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    enName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    episodes: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        airDate: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        date: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        description: faker.helpers.arrayElement([
          faker.word.sample(),
          undefined,
        ]),
        enDescription: faker.helpers.arrayElement([
          faker.word.sample(),
          undefined,
        ]),
        enName: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        number: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        still: faker.helpers.arrayElement([
          {
            previewUrl: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.word.sample(), null]),
              undefined,
            ]),
            url: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.word.sample(), null]),
              undefined,
            ]),
            ...overrideResponse,
          },
          undefined,
        ]),
        ...overrideResponse,
      })),
      undefined,
    ]),
    episodesCount: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    movieId: faker.number.int({ min: undefined, max: undefined }),
    name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    number: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    poster: faker.helpers.arrayElement([
      {
        previewUrl: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.word.sample(), null]),
          undefined,
        ]),
        url: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.word.sample(), null]),
          undefined,
        ]),
        ...overrideResponse,
      },
      undefined,
    ]),
    updatedAt: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        null,
      ]),
      undefined,
    ]),
    ...overrideResponse,
  })),
  limit: faker.number.int({ min: undefined, max: undefined }),
  page: faker.number.int({ min: undefined, max: undefined }),
  pages: faker.number.int({ min: undefined, max: undefined }),
  total: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getReviewControllerFindManyV14ResponseMock = (
  overrideResponse: any = {},
): ReviewDocsResponseDtoV14 => ({
  docs: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    author: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    authorId: faker.number.int({ min: undefined, max: undefined }),
    createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
    date: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    id: faker.number.int({ min: undefined, max: undefined }),
    movieId: faker.number.int({ min: undefined, max: undefined }),
    review: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    title: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    type: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    updatedAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
    userRating: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  })),
  limit: faker.number.int({ min: undefined, max: undefined }),
  page: faker.number.int({ min: undefined, max: undefined }),
  pages: faker.number.int({ min: undefined, max: undefined }),
  total: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getPersonControllerFindOneV14ResponseMock = (
  overrideResponse: any = {},
): Person => ({
  age: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      null,
    ]),
    undefined,
  ]),
  birthday: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.word.sample(), null]),
    undefined,
  ]),
  birthPlace: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      value: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  countAwards: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined }),
    undefined,
  ]),
  createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
  death: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.word.sample(), null]),
    undefined,
  ]),
  deathPlace: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      value: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  enName: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.word.sample(), null]),
    undefined,
  ]),
  facts: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      value: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  growth: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      null,
    ]),
    undefined,
  ]),
  id: faker.number.int({ min: undefined, max: undefined }),
  movies: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      alternativeName: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      description: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      enProfession: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      general: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      id: faker.number.int({ min: undefined, max: undefined }),
      name: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      rating: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  name: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.word.sample(), null]),
    undefined,
  ]),
  photo: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.word.sample(), null]),
    undefined,
  ]),
  profession: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      value: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      ...overrideResponse,
    })),
    undefined,
  ]),
  sex: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.word.sample(), null]),
    undefined,
  ]),
  spouses: faker.helpers.arrayElement([
    {
      children: faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        undefined,
      ]),
      divorced: faker.helpers.arrayElement([
        faker.datatype.boolean(),
        undefined,
      ]),
      divorcedReason: faker.helpers.arrayElement([
        faker.word.sample(),
        undefined,
      ]),
      id: faker.number.int({ min: undefined, max: undefined }),
      name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      relation: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      sex: faker.helpers.arrayElement([faker.word.sample(), undefined]),
      ...overrideResponse,
    },
    undefined,
  ]),
  updatedAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
  ...overrideResponse,
});

export const getPersonControllerFindManyV14ResponseMock = (
  overrideResponse: any = {},
): PersonDocsResponseDtoV14 => ({
  docs: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    age: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        null,
      ]),
      undefined,
    ]),
    birthday: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.word.sample(), null]),
      undefined,
    ]),
    birthPlace: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        value: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        ...overrideResponse,
      })),
      undefined,
    ]),
    countAwards: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
    death: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.word.sample(), null]),
      undefined,
    ]),
    deathPlace: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        value: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        ...overrideResponse,
      })),
      undefined,
    ]),
    enName: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.word.sample(), null]),
      undefined,
    ]),
    facts: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        value: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        ...overrideResponse,
      })),
      undefined,
    ]),
    growth: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        null,
      ]),
      undefined,
    ]),
    id: faker.number.int({ min: undefined, max: undefined }),
    movies: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        alternativeName: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.word.sample(), null]),
          undefined,
        ]),
        description: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.word.sample(), null]),
          undefined,
        ]),
        enProfession: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.word.sample(), null]),
          undefined,
        ]),
        general: faker.helpers.arrayElement([
          faker.datatype.boolean(),
          undefined,
        ]),
        id: faker.number.int({ min: undefined, max: undefined }),
        name: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.word.sample(), null]),
          undefined,
        ]),
        rating: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        ...overrideResponse,
      })),
      undefined,
    ]),
    name: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.word.sample(), null]),
      undefined,
    ]),
    photo: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.word.sample(), null]),
      undefined,
    ]),
    profession: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        value: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        ...overrideResponse,
      })),
      undefined,
    ]),
    sex: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.word.sample(), null]),
      undefined,
    ]),
    spouses: faker.helpers.arrayElement([
      {
        children: faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          undefined,
        ]),
        divorced: faker.helpers.arrayElement([
          faker.datatype.boolean(),
          undefined,
        ]),
        divorcedReason: faker.helpers.arrayElement([
          faker.word.sample(),
          undefined,
        ]),
        id: faker.number.int({ min: undefined, max: undefined }),
        name: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        relation: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        sex: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        ...overrideResponse,
      },
      undefined,
    ]),
    updatedAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
    ...overrideResponse,
  })),
  limit: faker.number.int({ min: undefined, max: undefined }),
  page: faker.number.int({ min: undefined, max: undefined }),
  pages: faker.number.int({ min: undefined, max: undefined }),
  total: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getPersonControllerSearchPersonV14ResponseMock = (
  overrideResponse: any = {},
): SearchPersonResponseDtoV14 => ({
  docs: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    age: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        null,
      ]),
      undefined,
    ]),
    birthday: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.word.sample(), null]),
      undefined,
    ]),
    birthPlace: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        value: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        ...overrideResponse,
      })),
      undefined,
    ]),
    death: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.word.sample(), null]),
      undefined,
    ]),
    deathPlace: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        value: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        ...overrideResponse,
      })),
      undefined,
    ]),
    enName: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.word.sample(), null]),
      undefined,
    ]),
    growth: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        null,
      ]),
      undefined,
    ]),
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.word.sample(), null]),
      undefined,
    ]),
    photo: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.word.sample(), null]),
      undefined,
    ]),
    profession: faker.helpers.arrayElement([
      Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        value: faker.helpers.arrayElement([faker.word.sample(), undefined]),
        ...overrideResponse,
      })),
      undefined,
    ]),
    sex: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.word.sample(), null]),
      undefined,
    ]),
    ...overrideResponse,
  })),
  limit: faker.number.int({ min: undefined, max: undefined }),
  page: faker.number.int({ min: undefined, max: undefined }),
  pages: faker.number.int({ min: undefined, max: undefined }),
  total: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getPersonControllerFindManyAwardsV14ResponseMock = (
  overrideResponse: any = {},
): PersonAwardDocsResponseDto => ({
  docs: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    createdAt: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        null,
      ]),
      undefined,
    ]),
    movie: faker.helpers.arrayElement([
      {
        id: faker.number.int({ min: undefined, max: undefined }),
        name: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.word.sample(), null]),
          undefined,
        ]),
        rating: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        ...overrideResponse,
      },
      undefined,
    ]),
    nomination: faker.helpers.arrayElement([
      {
        award: faker.helpers.arrayElement([
          {
            title: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.word.sample(), null]),
              undefined,
            ]),
            year: faker.helpers.arrayElement([
              faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                null,
              ]),
              undefined,
            ]),
            ...overrideResponse,
          },
          undefined,
        ]),
        title: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.word.sample(), null]),
          undefined,
        ]),
        ...overrideResponse,
      },
      undefined,
    ]),
    personId: faker.number.int({ min: undefined, max: undefined }),
    updatedAt: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split(".")[0]}Z`,
        null,
      ]),
      undefined,
    ]),
    winning: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]),
    ...overrideResponse,
  })),
  limit: faker.number.int({ min: undefined, max: undefined }),
  page: faker.number.int({ min: undefined, max: undefined }),
  pages: faker.number.int({ min: undefined, max: undefined }),
  total: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getStudioControllerFindManyV14ResponseMock = (
  overrideResponse: any = {},
): StudioDocsResponseDtoV14 => ({
  docs: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
    id: faker.word.sample(),
    movies: faker.helpers.arrayElement([
      {
        id: faker.number.int({ min: undefined, max: undefined }),
        ...overrideResponse,
      },
      undefined,
    ]),
    subType: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.word.sample(), null]),
      undefined,
    ]),
    title: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.word.sample(), null]),
      undefined,
    ]),
    type: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ",
        "–°–ø–µ—Ü—ç—Ñ—Ñ–µ–∫—Ç—ã",
        "–ü—Ä–æ–∫–∞—Ç",
        "–°—Ç—É–¥–∏—è –¥—É–±–ª—è–∂–∞",
      ] as const),
      undefined,
    ]),
    updatedAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
    ...overrideResponse,
  })),
  limit: faker.number.int({ min: undefined, max: undefined }),
  page: faker.number.int({ min: undefined, max: undefined }),
  pages: faker.number.int({ min: undefined, max: undefined }),
  total: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getKeywordControllerFindManyV14ResponseMock = (
  overrideResponse: any = {},
): KeywordDocsResponseDtoV14 => ({
  docs: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
    id: faker.number.int({ min: undefined, max: undefined }),
    movies: faker.helpers.arrayElement([
      {
        id: faker.number.int({ min: undefined, max: undefined }),
        ...overrideResponse,
      },
      undefined,
    ]),
    title: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.word.sample(), null]),
      undefined,
    ]),
    updatedAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
    ...overrideResponse,
  })),
  limit: faker.number.int({ min: undefined, max: undefined }),
  page: faker.number.int({ min: undefined, max: undefined }),
  pages: faker.number.int({ min: undefined, max: undefined }),
  total: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getImageControllerFindManyV14ResponseMock = (
  overrideResponse: any = {},
): ImageDocsResponseDtoV14 => ({
  docs: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
    height: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    language: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    movieId: faker.number.int({ min: undefined, max: undefined }),
    previewUrl: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    type: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    updatedAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
    url: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    width: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    ...overrideResponse,
  })),
  limit: faker.number.int({ min: undefined, max: undefined }),
  page: faker.number.int({ min: undefined, max: undefined }),
  pages: faker.number.int({ min: undefined, max: undefined }),
  total: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getListControllerFindManyV14ResponseMock = (
  overrideResponse: any = {},
): ListDocsResponseDtoV14 => ({
  docs: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    category: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.word.sample(), null]),
      undefined,
    ]),
    cover: faker.helpers.arrayElement([
      {
        previewUrl: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.word.sample(), null]),
          undefined,
        ]),
        url: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.word.sample(), null]),
          undefined,
        ]),
        ...overrideResponse,
      },
      undefined,
    ]),
    createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
    moviesCount: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        null,
      ]),
      undefined,
    ]),
    name: faker.word.sample(),
    slug: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.word.sample(), null]),
      undefined,
    ]),
    updatedAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
    ...overrideResponse,
  })),
  limit: faker.number.int({ min: undefined, max: undefined }),
  page: faker.number.int({ min: undefined, max: undefined }),
  pages: faker.number.int({ min: undefined, max: undefined }),
  total: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getListControllerFindOneV14ResponseMock = (
  overrideResponse: any = {},
): List => ({
  category: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.word.sample(), null]),
    undefined,
  ]),
  cover: faker.helpers.arrayElement([
    {
      previewUrl: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      url: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.word.sample(), null]),
        undefined,
      ]),
      ...overrideResponse,
    },
    undefined,
  ]),
  createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
  moviesCount: faker.helpers.arrayElement([
    faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      null,
    ]),
    undefined,
  ]),
  name: faker.word.sample(),
  slug: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.word.sample(), null]),
    undefined,
  ]),
  updatedAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
  ...overrideResponse,
});

export const getMovieControllerFindOneV14MockHandler = (
  overrideResponse?: MovieDtoV14,
) => {
  return http.get("*/v1.4/movie/:id", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? overrideResponse
          : getMovieControllerFindOneV14ResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getMovieControllerFindManyByQueryV14MockHandler = (
  overrideResponse?: MovieDocsResponseDtoV14,
) => {
  return http.get("*/v1.4/movie", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? overrideResponse
          : getMovieControllerFindManyByQueryV14ResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getMovieControllerSearchMovieV14MockHandler = (
  overrideResponse?: SearchMovieResponseDtoV14,
) => {
  return http.get("*/v1.4/movie/search", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? overrideResponse
          : getMovieControllerSearchMovieV14ResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getMovieControllerGetRandomMovieV14MockHandler = (
  overrideResponse?: MovieDtoV14,
) => {
  return http.get("*/v1.4/movie/random", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? overrideResponse
          : getMovieControllerGetRandomMovieV14ResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getMovieControllerFindManyAwardsV14MockHandler = (
  overrideResponse?: MovieAwardDocsResponseDto,
) => {
  return http.get("*/v1.4/movie/awards", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? overrideResponse
          : getMovieControllerFindManyAwardsV14ResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getMovieControllerGetPossibleValuesByFieldNameMockHandler = (
  overrideResponse?: PossibleValueDto[],
) => {
  return http.get("*/v1/movie/possible-values-by-field", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? overrideResponse
          : getMovieControllerGetPossibleValuesByFieldNameResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getSeasonControllerFindManyV14MockHandler = (
  overrideResponse?: SeasonDocsResponseDtoV14,
) => {
  return http.get("*/v1.4/season", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? overrideResponse
          : getSeasonControllerFindManyV14ResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getReviewControllerFindManyV14MockHandler = (
  overrideResponse?: ReviewDocsResponseDtoV14,
) => {
  return http.get("*/v1.4/review", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? overrideResponse
          : getReviewControllerFindManyV14ResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getPersonControllerFindOneV14MockHandler = (
  overrideResponse?: Person,
) => {
  return http.get("*/v1.4/person/:id", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? overrideResponse
          : getPersonControllerFindOneV14ResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getPersonControllerFindManyV14MockHandler = (
  overrideResponse?: PersonDocsResponseDtoV14,
) => {
  return http.get("*/v1.4/person", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? overrideResponse
          : getPersonControllerFindManyV14ResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getPersonControllerSearchPersonV14MockHandler = (
  overrideResponse?: SearchPersonResponseDtoV14,
) => {
  return http.get("*/v1.4/person/search", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? overrideResponse
          : getPersonControllerSearchPersonV14ResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getPersonControllerFindManyAwardsV14MockHandler = (
  overrideResponse?: PersonAwardDocsResponseDto,
) => {
  return http.get("*/v1.4/person/awards", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? overrideResponse
          : getPersonControllerFindManyAwardsV14ResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getStudioControllerFindManyV14MockHandler = (
  overrideResponse?: StudioDocsResponseDtoV14,
) => {
  return http.get("*/v1.4/studio", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? overrideResponse
          : getStudioControllerFindManyV14ResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getKeywordControllerFindManyV14MockHandler = (
  overrideResponse?: KeywordDocsResponseDtoV14,
) => {
  return http.get("*/v1.4/keyword", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? overrideResponse
          : getKeywordControllerFindManyV14ResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getImageControllerFindManyV14MockHandler = (
  overrideResponse?: ImageDocsResponseDtoV14,
) => {
  return http.get("*/v1.4/image", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? overrideResponse
          : getImageControllerFindManyV14ResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getListControllerFindManyV14MockHandler = (
  overrideResponse?: ListDocsResponseDtoV14,
) => {
  return http.get("*/v1.4/list", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? overrideResponse
          : getListControllerFindManyV14ResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getListControllerFindOneV14MockHandler = (
  overrideResponse?: List,
) => {
  return http.get("*/v1.4/list/:slug", async () => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? overrideResponse
          : getListControllerFindOneV14ResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};
export const getAPIKinopoiskDevMock = () => [
  getMovieControllerFindOneV14MockHandler(),
  getMovieControllerFindManyByQueryV14MockHandler(),
  getMovieControllerSearchMovieV14MockHandler(),
  getMovieControllerGetRandomMovieV14MockHandler(),
  getMovieControllerFindManyAwardsV14MockHandler(),
  getMovieControllerGetPossibleValuesByFieldNameMockHandler(),
  getSeasonControllerFindManyV14MockHandler(),
  getReviewControllerFindManyV14MockHandler(),
  getPersonControllerFindOneV14MockHandler(),
  getPersonControllerFindManyV14MockHandler(),
  getPersonControllerSearchPersonV14MockHandler(),
  getPersonControllerFindManyAwardsV14MockHandler(),
  getStudioControllerFindManyV14MockHandler(),
  getKeywordControllerFindManyV14MockHandler(),
  getImageControllerFindManyV14MockHandler(),
  getListControllerFindManyV14MockHandler(),
  getListControllerFindOneV14MockHandler(),
];
